#+title: PHP+MySQL+AJAX Web 给力起飞
#+author: CYQ
#+date:<2022-01-24 Mon>
#+options: ^:{}
#+LANGUAGE: zh-CN
#+html_head: <link rel="stylesheet" type="text/css" href="./css/worg.css"/>

* 第1 章 PHP 编程快速上手
** PHP 简介与环境部署
PHP是RasmusLerdorf在1994年秋天构思出来的。最早的未发行版本用在了他自己的主页上，功能也只是用来和观看他的在线简历的人保持联系。第一个交付用户使用的版本是在1995年6月发行的，它仅被当做一个个人主页制作工具：包括一个只懂得很少几条宏指令的、非常简单的分析引擎和一组用于主页信息反馈的工具（一个留言簿、一个计数器和一些其他的东西）。这时，它还只是一个不起眼的小家伙。

1996年，Rasmus重写了整个解析器，并在4月取名为PHP/FI2发布。FI来源于他写的另外一个HTML表单集成数据的软件包。他把个人主页工具和表单集成工具合并在一起，并加入了MySQL数据库的支持，这样就有了PHP/FI。此后，不起眼的小家伙便以一种令人惊异的速度传播开来，人们开始大量使用它编写程序。

1997年年中，PHP出现了一个重大的转折，这就是PHP的开发从Rasmus个人的爱好升级到一群程序员们有组织的工作。同年，这个解析器被ZeevSuraski和AndiGutmans重写，通
过这次全面的重写，大量PHP/FI的功能被移植到PHP中，并且成为了PHP3的雏形。PHP项目从一个人的项目转变成一个有很多开发者的真正的世界性开源项目，到1998年年中时，已经有了大量的商业化产品，例如C2的StrongHoldWebServer和RedHatLinux捆绑了PHP/FI解析器或PHP解析器。再也没有人敢说PHP是一个不起眼的小家伙了，在PHP3发布之后，PHP的用户数量开始激增。

此后，PHP4，PHP5日趋完善，而PHP6更是有大幅度的改进，不但添加了“命名空间（namespace）”，还对多字节的处理进行了更好的修订，同时废除了早期版本遗留的一些困惑初学者的功能（magic_quotes等）。
*** 什么是 PHP
PHP也是一个递归缩写（PHP，HypertextPreprocessor，超文本预处理器）。PHP是一种为创建HTML内容而设计的简单但是功能强大的语言。PHP主要运用在以下三个方面。

 - Web 服务器端脚本
 - 命令行脚本
 - 客户端 GUI 应用
 
***  安装 PHP 开发环境
*** 部署 PHP 开发环境
** 面向对象的 PHP 与 MVC 设计模式
*** PHP 中的面向对象编程
**** 类与对象
在PHP中，通过使用“public/private/protected”关键词声明类的属性；使用“function”关键词声明类的方法，就像定义一个函数一样。

- 构造函数
  
  大多数类都包含一个称为构造函数的特殊方法，其作用是当创建一个对象时，PHP解释器将自动调用该类的构造函数来完成一些操作，例如设置属性的初始值或创建该对象所需的其他对象等。声明构造函数与声明类的其他方法相同，但其名称必须是__construct() [fn:1]
  
- 析构函数
  
 同样，PHP5也支持析构函数，其作用是在销毁一个类之前执行一些“最后”的操作或完成一些功能，这些操作或功能通常在所有对该类的引用都被重置或超出作用域时自动发生。与构造函数的名称类似，析构函数的名称必须是__destruct()，不同的是，析构函数不能带有任何参数。

- 对象实例化
  
  类的定义指明了其包含的信息和对外的接口，但是要使用它，必须将其实例化为对象。

- 创建对象副本
  
  在PHP5中，可以使用clone关键词创建一个已有对象的副本，副本与原对象具有相同类的拷贝，而且具有相同的属性值，如果要对复制的过程做其他操作，可以在基类中创建一个__clone()方法，在其中定义所需的确切行为。

**** 使用类的属性和方法
- $this  指针

  在一个类中，存在一个特殊的内部指针——$this，可以使用这个变量指代这个类自身来进行操作。

- __get()和__set()函数

按照封装的原则，从类的外部直接访问类的属性是不合适的，解决的办法是使用__get()和__set()函数。__get()函数的作用是返回该属性的值，其带有一个参数：属性的名称。__set()函数的作用是设置属性的值，其带有两个参数：属性的名称和值。__get()和__set()函数的用法如例11所示。

#+begin_src php
      function __get($name){
          return $this->$name;
      }

    function __set($name,$value){
        $this->$name=$value;
    }

#+end_src

**** 重载

  与C#和Java等强类型语言不同，PHP5中不能通过定义不同参数的同名函数来实现方法的重载（Overload），而需要使用__call()函数来实现，如例12所示。

#+begin_src php
  publicfunction __call($method,$p){
                                echo "Invoking$method()<br/>";
                                if($method=='display'){
                                    if(is_object($p[0])){
                                        //若$p[0]是一个对象,则调用displayobject()函数
                                        $this->displayObject($p[0]);
                                    }else{
                                        if(is_array($p[0])){
                                            //若$p[0]是一个数组,则调用displayArray()函数
                                            $this->displayArray($p[0]);
                                        }else{
                                            //若$p[0]既不是对象也不是数组,调用displayScalar()函数
                                            $this->displayScalar($p[0]);
                                        }
                                    }
#+end_src

**** 继承
在PHP中实现类与类之间的继承关系，应使用extends关键词，如例13所示。

#+begin_src php
    class NEW_CLASS extends CLASSNAME {
        private $property2;
  ……
    }

#+end_src

父类和子类之间继承的内容（包括属性和方法）可以使用“public/private/protected”关键词修饰:

- 被指定为public的内容，在类的外部可见，也可以被当前类的子类继承。
- 被指定为private的内容，在类的外部不可见，也不能被继承。
- 被指定为protected的内容，在类的外部不可见，可以被继承。
- 被继承的内容不指明修饰关键词的情况下，默认为public。

  若子类与其父类具有相同名称的属性或方法，则子类中的属性和方法比父类中的优先级高，将会覆盖（override）父类中的属性和方法。此时访问类的属性或调用类的方法将访问子类的属性或调用子类的方法(3)。在这种情况下要访问父类中被覆盖的方法，可以使用以下方式：

#+begin_quote
parent::method();
#+end_quote

而要调用当前类自身的方法，可以使用：

#+begin_quote
self::method();
#+end_quote

- final 关键词

  若要禁止父类的方法在子类中被覆盖，可以使用final关键词，例如若将类CLASSNAME中的test()方法修改为：

#+begin_src php
    final public function test() {
        echo $this->property.'';
    }
 #+end_src

**** 接口和多重继承
部分面向对象的语言支持多重继承，如C++和Smalltalk等，但是PHP并不支持。即在PHP中，每个类都只能继承自一个父类，但是一个父类可以有多个子类。

接口（Interface）提供了定义一个类所遵循的规则的途径。接口提供了类方法的原型和常量。任何实现（Implement）该接口的类必须提供接口中所有方法的具体实现。

定义一个接口:

#+begin_src php
    interface INTERFACENAME {
        functionif_func();
    }
#+end_src
接口中定义的方法不能包含任何函数内容，在形式上更类似于一个方法的声明（Declare）。

**** 抽象类
PHP提供了一种机制，让一个类这种特定的方法在子类中必须实现，而这些方法在父类中没有实现（仅仅做了“声明”），这时可以使用称为抽象类方法（AbstractMethod）的方式。另外，一个类中只要有一个方法被定义为抽象方法，则该类就必须使用“abstract”关键词定义为抽象类（AbstractClass）。

需要注意，抽象类不能被直接实例化，在PHP中不能为其提供一个默认的实现。

**** 自省机制（Introspection）
自省（Introspection）机制被用来让程序检查对象的特性，例如名称、父类、属性和访问等。利用自省机制可以编写对任何类或对象进行操作的代码，在编写代码时不需要知道类中定义了哪些属性和方法，但在运行时可以得到这些信息。

确定一个类是否存在可以使用class_exists()函数，该函数有一个字符串参数并返回一个布尔值。使用get_declared_classes()函数则将得到一个包含所有当前已定义的类的数组。

类似的，可以使用函数get_class_methods()来得到一个类中的所有方法，使用函数get_class_vars()来得到一个类中的所有属性。这两个函数都使用类名作为参数，返回一个数组。函数get_parent_class()用来返回一个类的父类的名称。检查一个变量是否为对象，可以使用is_object()函数，返回值为布尔型。要得知一个对象所属的类名，可以使用get_class()函数。检查一个类是否存在某方法，可以使用method_exists()函数

调用一个未定义的类方法会触发一个运行时异常（RuntimeException）。与函数get_class_vars()类似，get_object_vars()返回一个对象的所有属性组成的数组。

检查一个对象是否是某一个类的实例，可以使用instanceof关键词，以检查一个对象是否是某特定的类的实现，或是否是从某个类继承过来或是否实现了某个接口。PHP5引入了类的类型检查机制，通常情况下向一个函数传递一个参数的时候，不能传递该参数的类型；而使用类类型检查，可以指定必须传入的参数的类类型，如果传入的参数的类类型不是指定的类型，将产生一个FatalError错误。

*** PHP 中的命名空间（Namespace）
从PHP5.3版本开始，新增了一个重要特性：命名空间（Namespace），主要用于解决类和方法的命名冲突。使用namespace关键字给一段代码命名后，这段代码外部的脚本必须使用操作符“::”加上命名空间的名称来引用这个代码块，引用静态的类成员也是用相同的方法。在命名空间内代码不需要声明命名空间，它本身就是默认的。使用命名空间可以使代码变得更加紧凑和可读。

*** MVC 模式
MVC模式（ModelViewController）是时下流行的Web应用架构，它在1970年由TrygveM.H.Reenskaug在施乐公司的研究中心提出。其最早的参考例程代码用SmallTalk80写成，最初用来解决应用软件中用户图形界面的交互问题。

- Model

  Model封装了系统的应用数据、应用流程和业务逻辑，它可能是应用中最主要的逻辑处理部分。Model没有任何关于界面风格的表达，也不处理任何HTTP请求。

- View

  View主要处理所有界面表现的问题。View从Model中提取数据，格式化为HTML或者XML页面的内容，输出到用户的客户端。

  直接通过View中的表单来调用Model中的方法去修改数据是不合适的，数据的更新修改方法只能借助Controller来调用。View只能以数据的只读方式调用Model中的方法，不能对数据进行修改。

  View在通常情况下的表现形式是模板系统，它使用一些包括了特殊标记的模板文件（例如HTML格式），View被执行时，这些特殊标记就被Model里的对应数据替换并显示出来。以这种方式运作的最典型的例子就是Smarty——一个典型的PHP模板系统。

- Controller

  Controller主要用来解释HTTP请求和响应、控制操作和行为、控制程序流程、接收输入，并把它们传递给Model和View。

  Controller包括前端控制器（FrontControllers）和应用控制器（ApplicationController）。

  前端控制器有助于集中控制应用流于一点。集中化可以帮助了解一个复杂的系统是怎样运行的，以及提供一个可以插入全局代码的空间。前端控制器对于集中控制的系统是很好的选择。前端控制器经常把控制委托给应用控制器，应用控制器是对不同的请求执行的具体操作，它是MVC中Controller的真正核心所在。

** PHP 与正则表达式  （Regular Expression）
*** 正则表达式基础知识
**** 简单表达式
**** 元字符

** 边学边练：简易网络聊天室

1. 使用数据库保存用户名、密码、聊天记录等信息。
2. 使用AJAX方式刷新页面，更新用户聊天内容。
3. 使用正则表达式对聊天内容进行敏感词语过滤。
4. 以SOAP方式对外提供WebService，站外用户通过验证身份（使用系统聊天用户的账号密码）后可以调用API。API包括：验证身份、发消息、获取最新10条聊天记录、查看在线用户列表等。
5. 整个程序使用MVC模式。

* 第 2 章 MySQL 数据库基本操作   








[fn:1]  这是PHP5中的要求。在PHP4中则要求构造函数的名称必须与类的名称相同。PHP5为了保持与PHP4兼容，如果一个类中没有名为__construct()的方法，PHP解释器将搜索一个与类名称相同的方法。
 




 
