#+title:org-mod学习笔记
#+author: ShadowFish
#+data:[2018-12-05 Wed]
#+Email:cyq3721@gmail.com
#+startup: indent

* 简介
Org-Mode：Your Life in Plain Text.

Org-Mode是文本编辑软件Emacs的一种支持内容分级显示的编辑模式。  这种模式支持写to-do列表，日志管理，做笔记，做工程计划或者写网页。  比如，todo列表可以给每一件事分别赋上不同的优先级和最后完成期限，每一个todo项目又可以细分次级tudo列表或者核对表，而且每一个项目还都可以分别加标签或者属性。  除此以外，org-mode还可以自动生成某一时间段以内的日程表。

* 安装及简单配置
Emacs23以后已经默认包含有org-mode。

* 简单操作
** 标题
文章中可以通过 #+TITLE： 来设置标题。 如：
#+BEGIN_QUOTE
#+TITLE:  神奇中的神器org-mode之入门篇
#+END_QUOTE
正文中的标题可以通过*，后面要跟空格，然后再输入想要的标题就可以了。  一个*表示一级，最多可以有10级标题。
** 段落
在win下只要enter，就换行成为新的一段。  但在这里要开始新的段落需要回车两次，当你回车一次，当你发布时，只相当于中间有个空格而已。  还有一种方法就是在需要换行的地方输入“\\“。
#+BEGIN_QUOTE
段落1

段落2\\
段落3
#+END_QUOTE

* 基本教程
** 文档结构
*** 标题
- 【* 】一级标题
- 【** 】二级标题依次类推
- 【TABLE】展开/关闭提纲，多层提纲按一次展开一级，没有之后再按关闭所有
- 【S-TABLE】展开/关闭所有提纲
- 【C-U C-U C-U TAB】显示全部
*** 标题间移动
- 【c-c c-n】下一个标题
- 【c-c c-p】上一个标题
- 【c-c c-f】下一个同级标题
- 【c-c c-b】上一个同级标题
- 【c-c c-u】回到上层标题
*** 结构编辑
- 【m-ret】在行尾按下创建新的同级标题
- 【m-↑/↓】移动当前标题（连带子标题）
- 【s-m-←/→】调整当前标题等级（连带子标题）
- 【c-x n s/w】本页只显示当前标题
*** 列表
-  相当于html中的列表（emacs有导出的功能，导出html c-c c-e h h ）
-  无序列表项以‘-’、‘+’或者‘*‘开头。
-  有序列表项以‘1.’、‘1)’或者开头。
-  描述列表用‘::’将项和描述分开。
- 【C-c -】循环改变项标志符
*** 脚注

- 【c-c c-x f】 光标在开头是根据参数创建脚注，在文中时在当前位置插入一个新的脚注，在脚注上时跳转到定义
- 【c-c c-c】 在定义个引用直接进行跳转
** 字体
   #+begin_example
      *粗体*
      /斜体/
      +删除线+
      _下划线_
      下标： H_2 O(这里必须留一个空格要不然2和O都成为小标，目前还不知道怎么去掉空格)
      上标： E=mc^2
      等宽字：  =git=
   #+end_example
** 列表
   1. 这里有有序和无序两种，还有一种描述列表。
        - 无序列表以'-'、'+'或者'*'开头
        - 有序列表以'1.'或者'1)'开头
        - 描述列表用'::'
   2. 注意事项
        - 列表符号后面都要有空格
        - 同级别的列表缩进要相同
        - 如果想要加入同级别的列表，可以 M-RET
        - 空两行之后列表结束，如果空一行执行M-RET，实际上还是输入同级项

** 元数据
   org-mode中有以下几种元数据:
   #+begin_example
   s    #+begin_src ... #+end_src 
   e    #+begin_example ... #+end_example  : 单行的例子以冒号开头
   q    #+begin_quote ... #+end_quote      通常用于引用，与默认格式相比左右都会留出缩进
   v    #+begin_verse ... #+end_verse      默认内容不换行，需要留出空行才能换行
   c    #+begin_center ... #+end_center 
   l    #+begin_latex ... #+end_latex 
   L    #+latex: 
   h    #+begin_html ... #+end_html 
   H    #+html: 
   a    #+begin_ascii ... #+end_ascii 
   A    #+ascii: 
   i    #+index: line 
   I    #+include: line
*** 关于begin_src
    #+begin_quote
       #+begin_src c -n -t -h 7 -w 40

      #+end_src
       其中：
       c为所添加的语言
       -n 显示行号
       -t 清除格式
       -h 7 设置高度为7 -w 40设置宽度为40
    #+end_quote
** 表格
*** 创建
- 【|+space+table】自动创建表格
- 【|- +table】创建水平分割
- 【c+c ret】创建下一行，自带分割线
*** 操作
- 【tab】跳转到下一个表格
- 【s+tab】跳转到上一个表格
*** 编辑行和列
- 【m-↑/↓】 左/右移当前列
- 【s-m-←】删除当前行
- 【s-m-→】在光标位置左边添加一列
- 【s-m-↑】删除当前行
- 【s-m-↓】在当前行上面添加一行
** 超链接
*** 使用
- 【c-c c-l】编辑连接可将光标置于链接上 
- 【c-c c-o】 打开连接
*** 外部连接
- 连接外部文件头 http file ....
** 待办事项
*** 基本操作
- 【s-m-ret】在下面创建todo项，（会生成当前对应的项，没有的话为todo）
- 【c-c c-t】将当前项在todo done null 之间进行切换
- 【s-↑/↓】选择上/下一个todo状态

*** 自定义状态
- 可以自定义状态，竖线分割（任务）|（完成项）
- (setq org-todu-keywords

      '((sequence "TODU" "TODUA" "|" "DONE" "DONEA" )))

- 也可以定义多个集合
#+BEGIN_QUOTE
(setq org-todu-keywords
X
    '((sequence "TODU(t)" "TODUA(a)" "|" "DONE(d)" "DONEF(f)" )

    (sequence "TODUB(b)" "TODUC(c)" "|"  "DONEG(g)" )))
#+END_QUOTE
这样在按下【c-c c-t】的时候就会让你选择用哪一个，可以用括号的快捷键进行选择

*** 改变状态时显示时间
- 设置时间日志，转换状态到done显示时间
#+BEGIN_QUOTE
(setq org-log-done 'time)
#+END_QUOTE

- 自定义的状态可以在快捷键括号里面添加！ 显示时间
      + 【c-c c-s】 设置开始时间
      + 【c-c c-d】设置结束时间
*** 优先级
- 【s-↑】提高优先级

- 【s-↓】降低优先级
** 任务细分
- 在任务后面输入 [/]或者[%]
- 在使用快捷键方式创建任务项时会更改进度
- 大多数情况任务细分采用列表就可以了
- 【s-m-ret】创建下级任务
- 【m-↑】调整任务位置
- 【c-c c-c】改变任务状态


--------------------- 
作者：qq_39040148 
来源：CSDN 
原文：https://blog.csdn.net/qq_39040148/article/details/81029324 
版权声明：本文为博主原创文章，转载请附上博文链接！
* 操作技巧
** 快速输入 #+BEGIN_SRC ... #+END_SRC
输入<s ，再按TAB
** 代码的语法高亮
org-mode在导出成HTML时，可以对代码按照各自的语法进行高亮（只要在 #+begin_src 后面声明的语言是emacs所 支持的，其实也就是对应的major mode存在，比如声明为 #+begin_src js2 就要求 js2-mode 是存在的）。

但能不能在编辑的时候，就可以在org-mode里面看到语法高亮的效果呢？答案是肯定的！

#+BEGIN_QUOTE
(setq org-src-fontify-natively t)
#+END_QUOTE

org-mode在导出成HTML时，可以对代码按照各自的语法进行高亮（只要在 #+begin_src 后面声明的语言是emacs所支持的，其实也就是对应的major mode存在，比如声明为 #+begin_src js2 就要求 js2-mode 是存在的）。但能不能在编辑的时候，就可以在org-mode里面看到语法高亮的效果呢？答案是肯定的！

#+BEGIN_QUOTE
(setq org-src-fontify-natively t)
#+END_QUOTE

不过没有看到这个设置的更详细说明（我也没来看代码），在org-mode的文档中仅仅在Editing source code这一节 看到一句: To turn on native code fontification in the Org buffer, configure the variable org-src-fontify-natively. 另外，Pretty fontification of source code blocks这篇文档里有效果图:
[[/Users/chenyiqing/Library/Mobile%20Documents/com~apple~CloudDocs/.Trash/OneDrive/my_note(emacs%E7%89%88)/pic/fontified-src-code-blocks.png][效果图]]
** 在org-mode中实时显示图片
执行 M-x org-display-inline-images
** 导出成HTML时的一些问题和技巧
*** 生成目录表
如果想在导出成HTML时在文档前面生成一个章节目录表（Table of Contents），那么可以在文件头部的 OPTIONS 里面添加 toc:t 参数
#+BEGIN_QUOTE
#+OPTIONS: toc:t
:nil author:nil num:2
#+END_QUOTE

也可以设置 org-export-with-toc 这个变量

#+BEGIN_QUOTE
(setq org-export-with-toc t)
#+END_QUOTE

如果只想针对前面两个级别生成目录表，可以设置该值为相应的数字
#+BEGIN_QUOTE
#+OPTIONS: toc:2  ^:nil author:nil num:2
#+END_QUOTE


*** 为每个分节的标题添加标号
导出成HTML时，如果不自定义css（这个高级话题留待下次再说），那么h1, h2, h3各个级别的标题只会字体大小有 点不同，不会呈现不同颜色，不会有缩进，于是阅读起来各节之间的关系就搞不清楚了。可以设置 org-export-with-section-numbers 让导出时为各章节的标题添加 1.2.3 这样的

*** 禁用下划线转义
org-mode的文档在导出到html时，有一个挺烦人的问题就是 abc_def 会变成 abcdef，这其实是一种类似TeX的 写法，主要也就是在少数场景下有意义（其实与之相伴的还有一个 10^24 会变成 1024，不过这个对我影响不 大，因为我很少会用到这种写法）。

关闭这个功能的方法是在org文件头部的 OPTIONS 里面添加 ^:nil:
#+BEGIN_QUOTE
#+OPTIONS: ^:nil
#+END_QUOTE

参考: Export settings - The Org Manual

上面的方法是针对当前文件的，如果想针对所有文件缺省关闭这个功能，需要在 ~/.emacs 中设置:

(setq-default org-use-sub-superscripts nil)

** 自动换行
   M-x toggle-truncate-lines
** 表格和图片的交叉引用
   #+begin_quote
   对于表格和图片，可以在前面增加标题和标签的说明，以方便交叉引用。比如在表格的前面添加：
   #+CAPTION: This is the caption for the next table (or link)
   则在需要的地方可以通过： \ref{table1}  来引用该表格。
   #+end_quote

** org-mode隐藏标题中过多的星号
org-mode里面一个叫做 org-indent-mode 的minor mode对于阅读org-mode文档很不错，版面看起来清晰多了:

从上图可以看到，org-indent-mode 隐藏了章节标题中过多的星号，并且将内容缩进，这使得文档的层次结构清楚多了．
启用方法是 M-x org-indent-mode或者在文档头部添加 #+STARTUP: indent．
* customize自定义设置
  m-x 输入customize 进行各种自定义命令的查询
 
* org-mode美化相关配置
** 设置bullet list 美化heading
   #+begin_quote
   (setq org-bullets-bullet-list '("☪" "✿" "☯" “❦” “☄” "☭"))
   #+end_quote
** 设置折叠式不再显示「…」
   #+begin_quote
     (setq org-ellipsis "▽")
   #+end_quote
