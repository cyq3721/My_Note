#+title:Emacs绑定键盘的技巧
#+author: chen
#+data: <2021-06-19 Sat>

* 万无一失的绑定方法
很多任绑定一些比较特殊的键的时候，都搞不清楚在 （global-set-key ... 'my-funtion') 里写些什么。 特别是在xterm里的时候就更不知所措了。 其实有一个万无一失的办法保证你一定写对。 这个办法就是：

- M-x global-set-key ret    进入交互模式绑定键
- C-x Esc Esc               调出上一条“复杂命令”。

  现在就能在minibuffer中看到本该写在.emacs中的东西。
  如果还是失败了，可能是窗口管理器拦截了这个按键。

* 绑定新的前缀键
其实上面的办法只能让你绑定一个已有的前缀。 你有可能想绑定一个save-buffer到 “C-c C-w C-b a”， 此时，上面的方法就不灵了，我们必须使用另外的方法：
#+begin_quote
(global-set-key (kbd "C-c C-w C-b a") 'save-buffer)
#+end_quote
** 相关说明
上面的那个 "C-c C-w C-b a" 是自动把 "C-c C-w", "C-c C-w C-b" 都定义成了一个 prefix-command. 你可以这样看到它们：

- C-h C-b 显示绑定
- C-x o 切换到显示绑定的窗口
- C-x C-q 消除这个窗口的只读属性
- M-x delete-non-matching-lines RET prefix RET 删除所有不含 "prefix" 字样的行。

现在你清楚的看到了 "C-c C-w", "C-c C-w C-b" 都是 prefix command 吧？

* 创建新的prefix command
  上面这个办法只对开头的键已经是 prefix command 的键序列起作用， 如果你的第一个键不是一个 prefix，那么就会出错。你可以试试： (global-set-key (kbd "C-z C-c C-w b") 'find-file)。

出现错误：(error "Key sequence C-z C-c C-w b uses invalid prefix characters")

所以你必须事先把第一个键设定为 prefix:
(define-prefix-command 'ctl-z-map)
(global-set-key (kbd "C-z") 'ctl-z-map)

然后再用
(global-set-key (kbd "C-z C-c C-w b") 'find-file)
就行了。"C-z C-c" 和 "C-z C-c C-w" 都会自动被定义为 prefix command.

* 绑定中文命令
现在我举一个例子来说明 prefix command 是如何工作的。我们可以 把中文的 存盘 两个字绑定到save-buffer. 这样你用中文输入法 敲入“存盘”两个字时，就可以把当前 buffer 保存起来。

#+begin_quote
(define-prefix-command '存-map)
(global-set-key (kbd "存") '存-map)
(define-key 存-map (kbd "盘") 'save-buffer)
#+end_quote

有趣吧？你可以猜到这里面是怎么回事吧？太简单了是不是？当你输 入“存”的时候，看到 minibuffer 是这样：

这是因为我们把“存”这个字绑定到了 存-map 这个 prefix-command. 当读到“存”的时候，Emacs 就会等待下一条命令， 这个命令是定义在 存-map 这个 map 里的。它读到“盘”，就会执 行 save-buffer 了。

不过注意，你真的要在文档里输入“存盘”两个字就得先打 C-q 了。 刚才我就打了好多次 C-q，真累啊。还是用一些不常用的词组比较好， 或者加一个 ctrl 什么的前缀，就像这个，"C-z 存盘"。

 #+begin_quote
(define-prefix-command 'ctl-z-map)
(global-set-key (kbd "C-z") 'ctl-z-map)
(define-key ctl-z-map (kbd "存盘") 'save-buffer)
 #+end_quote

 看我们更 bt 一点:
#+begin_quote
(define-prefix-command 'ctl-z-map)
(global-set-key (kbd "C-z") 'ctl-z-map)
(define-key ctl-z-map (kbd "给我存盘啦！") 'save-buffer)
#+end_quote

嗨哟！yes sir!!

define-key 会自动建立很多 prefix command. 不过自己显式用 define-prefix-command 定义前缀命令有一个好处，就是你可以在你 的 prefix 里再方便的定义更多的命令，而不用把整个前缀都写一遍。

#+begin_src elisp

(define-prefix-command 'ctl-z-map)
(define-prefix-command '存-map)
(define-prefix-command '盘-map)

(global-set-key (kbd "C-z") 'ctl-z-map)
(define-key ctl-z-map (kbd "存") '存-map)
(define-key 存-map (kbd "盘") '盘-map)

(define-key 盘-map (kbd "！") 'save-buffer)
(define-key 盘-map (kbd "到") 'write-file)
(define-key 盘-map (kbd "退出") 
  (lambda ()
    (interactive)
    (save-buffer)
    (kill-emacs)))
#+end_src
这样，到了“C-z 存盘-” 这个时候，我们定义了3个分支：

“C-z 存盘！”，表示保存这个文件；
“C-z 存盘到”，表示保存到另一个文件；
“C-z 存盘退出”，这个不用解释了吧。
