#+Title:Master Emacs in 21 Days (2022)
#+author: chen
#+data:<2024-11-29 五>
#+LANGUAGE:zh-CN
#+html_head: <link rel="stylesheet" type="text/css" href="./css/worg.css"/>
* 第一天 准备开始（安装与改键）
** 说在最前面
如果你第一次听说 Emacs 你可以在[[https://emacs.sexy][性感的 Emacs（Emacs is Sexy）]]一文中找到使用它的理 由！我相信你一定会被它的强大所吸引。

如果你还没有安装 Emacs 可以在 Doom Emacs 的安装文档中查找[[https://github.com/doomemacs/doomemacs/blob/master/docs/getting_started.org#install][安装方法]]，根据你所使用的操作系统去下载对应 版本的 Emacs 就行了。（新手不推荐从源码进行编译安装，因为这会比较困难）

因为考虑到比较多的用户之前可能没有接触过 Mac 或者 Linux，所以新的系列视频我会直接使用 Windows 系统来 进行演示。Windows 下配置 Emacs 环境可以参考我之前在论坛写的[[https://emacs-china.org/t/windows-emacs/7907][文章]]。

由于 Windows 系统的一些限制，某一些 Emacs 的功能（Magit，lsp 等）表现并不是很好（主要指的是性能），读者可以 尝试安装 WLS 来使用 Emacs，具体方法可以参考[[http://ww5.hkvim.com/?subid1=0735f7f8-adef-11ef-9740-251d63c477a8][这篇文章]]。

在开始本教程之前请务必先完成 Emacs 提供的官方教程（完成时间大约 30 分钟），它可 以通过使用 C-h t （同时按住 Ctrl 与 h 键，接着按 t 键 t 在这里代表 tutorial） 在 Emacs 中直接将其打开。（当然你也可以在观看视频之后再去阅读 Emacs Tutorial）

Emacs Lisp 是 Emacs 所用的编程语言，你可以在阅读这篇教程[[https://learnxinyminutes.com/docs/elisp/][（Learn X in Y Minutes）]] 后很快地了解它的基础用法。

** 基础操作
在讲解基本操作之前，先跟大家讲一下改键。改键的作用除了可以让你的小拇指更健康以外，还可以统一我们的交流语言， 让大家后面学习过程可以更轻松。（这部分如果没有相关基础，强烈建议先看视频是怎么操作的）

*** Windows改建方法
直接利用power toys 进行改键， 把 Left Window 键改成 Left Alt 键，Left Alt 键改成 App 键，大小写键改成 Ctrl 键。 Emacs 默认 Alt 键就是 Meta，而 App 键我们改成 super 键，可以通过下面的 Elisp 代码来完成。
#+begin_src elisp
  (setq w32-apps-modifier 'super) 
#+end_src

*** Mac改键
Mac 下面大小写键改成 Ctrl 键（参考视频），Mac 系列只需要修改这个按键，其他的按键可以通过 Elisp 来修改
#+begin_src elisp
  (setq mac-option-modifier 'meta
      mac-command-modifier 'super)
#+end_src

*** 常见的符号
- M(eta)：统一改到 option 键（Mac），left windows 键（Windows）
- s(uper)：统一改到 command 键（Mac），left Alt 键（windows）
- S(Shift)：不用修改
- C(trl)：统一改成 Caps Lock（大小写切换键，这样可以拯救你的小拇指健康）

*** 光标移动
- C-f 为前移一个字符， f 代表 forward。
- C-b 为后移一个字符， b 代表 backward。
- C-p 为上移至前一行， p 代表 previous。
- C-n 为上移至下一行， n 代表 next。
- C-a 为移至行首， a 代表 ahead。
- C-e 为移至行尾， e 代表 end。

*** 配置跨平台的按键配置
#+begin_src elisp
(global-set-key (kbd "s-a") 'mark-whole-buffer) ;;对应Windows上面的Ctrl-a 全选
(global-set-key (kbd "s-c") 'kill-ring-save) ;;对应Windows上面的Ctrl-c 复制
(global-set-key (kbd "s-s") 'save-buffer) ;; 对应Windows上面的Ctrl-s 保存
(global-set-key (kbd "s-v") 'yank) ;对应Windows上面的Ctrl-v 粘贴
(global-set-key (kbd "s-z") 'undo) ;对应Windows上面的Ctrol-z 撤销
(global-set-key (kbd "s-x") 'kill-region) ;对应Windows上面的Ctrol-x 剪切
#+end_src
 
* 第二天： 打造属于你的记事本
** 内置功能
#+begin_src elisp
(put 'set-goal-column 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'LaTeX-hide-environment 'disabled nil)

;;(global-linum-mode t)                ;;全局开启行号,emacs29 开始废弃
;(column-number-mode t)   ; 在 Mode line 上显示列号,在新版中废弃
(global-display-line-numbers-mode 1)         ; 在 Window 显示行号
#+end_src

** 获取帮助
- C-h k 寻找快捷键的帮助信息
- C-h v 寻找变量的帮助信息
- C-h f 寻找函数的帮助信息

** 给 Windows 右键菜单添加 OpenWithEmacs 功能
#+begin_quote
Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\*\shell]
[HKEY_CLASSES_ROOT\*\shell\openwemacs]
@="&Edit with Emacs"
[HKEY_CLASSES_ROOT\*\shell\openwemacs\command]
@="C:\\emax64\\bin\\emacsclientw.exe -n \"%1\""
[HKEY_CLASSES_ROOT\Directory\shell\openwemacs]
@="Edit &with Emacs"
[HKEY_CLASSES_ROOT\Directory\shell\openwemacs\command]
@="C:\\emax64\\bin\\emacsclientw.exe -n \"%1\""
#+end_quote

使用这个 OpenWithEmacs 的功能，Emacs 需要开启 Server Mode，代码如下：
#+begin_src elisp
  (server-mode 1)
#+end_src

* 第三天： Elisp 基础、Org 基础和包管理器
** 学习基础Elisp
请务必完成这篇[[https://learnxinyminutes.com/docs/elisp/][教程（Learn X in Y Minutes）]]来了解 Elisp 的使用（阅读时间大约 15 分钟），你也可以在这里找到它的中文版。Emacs Lisp 为一个函数式的语言，所以它全部 功能都是由函数来实现的。
#+begin_src elisp
 ;; 2 + 2
(+ 2 2)

;; 2 + 3 * 4
(+ 2 (* 3 4))

;; 定义变量
(setq name "username")
(message name) ; -> "username"

;; 定义函数
(defun func ()
  (message "Hello, %s" name))

;; 执行函数
(func) ; -> Hello, username

;; 设置快捷键
(global-set-key (kbd "<f1>") 'func)

;; 使函数可直接被调用可添加 (interactive)
(defun func ()
  (interactive)
  (message "Hello, %s" name))

#+end_src

** 开始Hacking
Emacs 的配置文件默认保存在 ~/.emacs.d/init.el 文件中。（如果其不存在可自行创建， 配置文件也可保存在 ~/.emacs 文件中，他们之间的区别我们会在后面做讨论）

注意： 如果希望把配置放在 ~/.emacs.d/init.el 文件中，那么需要手工删除 ~/.emacs 文件。

** Major Mode 和 Minor Mode的区别
在开始配置之前让我们先来区别 Emacs 中 Major Mode 与 Minor Mode 的区别。Major Mode 通常是定义对于一种文件类型编辑的核心规则，例如语法高亮、缩进、快捷键绑定等。 而 Minor Mode 是除去 Major Mode 所提供的核心功能以外的额外编辑功能（辅助功能）。 例如在下面的配置文件中 tool-bar-mode 与 linum-mode 等均为 Minor Mode*。

简单来说就是，一种文件类型同时只能存在一种 Major Mode 但是它可以同时激活一种或多 种 Minor Mode。如果你希望知道当前的模式信息，可以使用 C-h m 来显示当前所有开启 的全部 Minor Mode 的信息。

** 简单的编辑器自定义
#+begin_src elisp
  ;; 关闭工具栏，tool-bar-mode 即为一个 Minor Mode
  (tool-bar-mode -1)

  ;; 关闭文件滑动控件
  (scroll-bar-mode -1)

  ;; 显示行号
  (global-linum-mode 1)

  ;; 更改光标的样式（不能生效，解决方案见第二集）
  (setq cursor-type 'bar)

  (icomplete-mode 1)

;; 更改显示字体大小 16pt
;; http://stackoverflow.com/questions/294664/how-to-set-the-font-size-in-emacs
(set-face-attribute 'default nil :height 160);;

;;让鼠标滚动更好用
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
(setq mouse-wheel-progressive-speed nil)


  ;; 快速打开配置文件
  (defun open-init-file()
    (interactive)
    (find-file "~/.emacs.d/init.el"))

  ;; 这一行代码，将函数 open-init-file 绑定到 <f2> 键上
  (global-set-key (kbd "<f2>") 'open-init-file)
#+end_src

在每次编辑配置文件后，刚刚做的修改并不会立刻生效。这时你需要重启编辑器或者重新加 载配置文件。重新加载配置文件你需要在当前配置文件中使用 M-x load-file 双击两次 回车确认默认文件名，或者使用 M-x eval-buffer 去执行当前缓冲区的所有 Lisp 命令。 你也可以使用 C-x C-e 来执行某一行的 Lisp 代码。这些可使刚刚修改的配置文件生效。 当然你也可以将这些函数绑定为快捷键。

** 插件管理
使用默认的插件管理系统（可在菜单栏 Options > Manage Emacs Packages 中找到）安 装 Company 插件，他是一个用于代码补全的插件。它的名字代表补全一切的意思（ Comp lete Any thing）。因为默认的插件管理系统提供的插件十分有限，所以我们会在之后的 几天中继续将其强化。

使用的下面的配置将 Company-mode 在全局模式下激活
#+begin_src elisp
 ; 开启全局 Company 补全
(global-company-mode 1)

;; company mode 默认选择上一条和下一条候选项命令 M-n M-p
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)  
#+end_src

* 第四天： 增强Emacs补全， 让Hacking更加有趣和可视化
** 关于lexical binding （语法绑定）
#+begin_src elisp
;;在文件最开头添加地个 文件作用域的变量设置，设置变量的绑定方式
;; -*- lexical-binding: t -*-
(let ((x 1))    ; x is lexically bound.
  (+ x 3))
⇒ 4

(defun getx ()
  x)            ; x is used free in this function.

(let ((x 1))    ; x is lexically bound.
  (getx))
;;error→ Symbol's value as variable is void: x
#+end_src
关于[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][lexical binding]] 更多的细节，可以自行阅读 Emacs 的官方文档。

** 配置gnu和melpa镜像
在进行美化之前我们需要配置插件的源（默认的源非常有限），最常使用的是 MELPA （Milkypostman's Emacs Lisp Package Archive）。它有非常多的插件（3000 多个插件）。 添加源后，我们就可以使用 M-x package-list-packages 来查看所有 MELPA 上的插件了。在表单中可以使用 i 来标记安装 d 来标记删除， U 来更新，并用 x 来确认。你也可以使用 u 来撤销标记操作。

#+begin_src elisp
  (require 'package)
  (setq package-archives '(("gnu"   . "http://elpa.zilongshanren.com/gnu/")

                           ("melpa" . "http://elpa.zilongshanren.com/melpa/")))
  (package-initialize)

  ;;防止反复调用 package-refresh-contents 会影响加载速度
  (when (not package-archive-contents)
    (package-refresh-contents))

  ;;modeline上显示我的所有的按键和执行的命令
  (package-install 'keycast)
  (keycast-mode t)
#+end_src

** 增强minibuffer补全：vertico和orderless
#+begin_src elisp
(package-install 'vertico)
(vertico-mode t)

(package-install 'orderless)
(setq completion-styles '(orderless))
#+end_src

** 配置marginalia增强minubuffer的annotation
#+begin_src elisp
(package-install 'marginalia)
(marginalia-mode t)

#+end_src
** minibuffer action和自适应的context menu：Emabark
#+begin_src elisp
(package-install 'embark)
(global-set-key (kbd "C-;") 'embark-act)
(setq prefix-help-command 'embark-prefix-help-command)
#+end_src

** 增强文件内搜索和跳转函数定义：consult
#+begin_src elisp
(package-install 'consult)
;;replace swiper
(global-set-key (kbd "C-s") 'consult-line)
;;consult-imenu
#+end_src

* 第五天：手动安装插件和外部程序
如果你想深入学习 Emacs Lisp 可以阅读 GNU 提供的[[https://www.gnu.org/software/emacs/manual/html_mono/eintr.html][An Introduction to Programming in Emacs Lisp]] 。（也可以 M-x info 然后选择 Emacs Lisp Intro）

我们先解决前一天中遇到的一些问题。首先是在对象是一个缓冲区局部变量（Buffer-local variable）的时候，比如这里的 cursor-type ，我们需要区分 setq 与 setq-default ： setq 设置当前缓冲区（Buffer）中的变量值， setq-default 设 置的为全局的变量的值（具体内容可以在 [[https://stackoverflow.com/questions/18172728/the-difference-between-setq-and-setq-default-in-emacs-lisp][StackOverflow]]找到）。下面是一个例子，用于 设置光标样式的方法。
#+begin_src elisp
(setq-default cursor-type 'bar)
(show-paren-mode t)

;;另外一件安装插件的方法
(add-to-list 'load-path (expand-file-name "~/.emacs.d/awesome-tab/"))

(require 'awesome-tab)

(awesome-tab-mode t)

(defun awesome-tab-buffer-groups ()
  "`awesome-tab-buffer-groups' control buffers' group rules.
Group awesome-tab with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
All buffer name start with * will group to \"Emacs\".
Other buffer group by `awesome-tab-get-group-name' with project name."
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
         (memq major-mode '(magit-process-mode
                            magit-status-mode
                            magit-diff-mode
                            magit-log-mode
                            magit-file-mode
                            magit-blob-mode
                            magit-blame-mode)))
     "Emacs")
    ((derived-mode-p 'eshell-mode)
     "EShell")
    ((derived-mode-p 'dired-mode)
     "Dired")
    ((memq major-mode '(org-mode org-agenda-mode diary-mode))
     "OrgMode")
    ((derived-mode-p 'eaf-mode)
     "EAF")
    (t
     (awesome-tab-get-group-name (current-buffer))))))
#+end_src

其次就是它使用到了 quote, 它其实就是我们之前常常见到的 ' （单引号）的完全体。 因为它在 Lisp 中十分常用，所以就提供了简写的方法。

#+begin_src elisp
;; 下面两行的效果完全相同的
(quote foo)
'foo
#+end_src

quote 的意思是不要执行后面的内容，返回它原本的内容（具体请参考下面的例子）
#+begin_src elisp
(print '(+ 1 1)) ;; -> (+ 1 1)
(print (+ 1 1))  ;; -> 2
#+end_src

更多关于 quote 的内容可以在[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html][这里]]找到，或者在这里找到 StackOverflow 上对于它的讨论。


因为通常我们的配置文件以及项目文件均使用版本控制系统，所以自动生成的备份文件就显 得有些多余。我们还可以禁止 Emacs 自动生成备份文件，例如 init.el~ 。（ ~ 为后 缀的文件为自动生成的备份文件）我们可以使用下面的方法将其关闭。

#+begin_src elisp
(setq make-backup-files nil)
#+end_src


使用下面的配置来加入最近打开过文件的选项让我们更快捷的在图形界面的菜单中打开最近 编辑过的文件。
#+begin_src elisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-max-menu-item 10)

;; 这个快捷键绑定可以用之后的插件 counsel 代替
;; (global-set-key (kbd "C-x C-r") 'recentf-open-files)
#+end_src

require 的意思为从文件中加载特性，你可以在杀哥的网站读到关于 Emacs Lisp 库系统 的更多内容，文章在[[http://xahlee.info/emacs/emacs/elisp_library_system.html][这里]]。

使用下面的配置文件将删除功能配置成与其他图形界面的编辑器相同，即当你选中一段文字 之后输入一个字符会替换掉你选中部分的文字。

#+begin_src elisp
(delete-selection-mode 1)
#+end_src
