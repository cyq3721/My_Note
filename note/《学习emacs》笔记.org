#+TITLE:《学习emacs》笔记
#+AUTHOR: Shadow-Fish
#+DATA:  2016-2-27

* 第一章 Emacs的基本概念
** 获取帮助
| 键盘  | 命令名称                      | 动作                    |
|-------+------------------------------+-------------------------|
| c-h   | help-command                 | 进入在线帮助系统          |
| c-h f | describe-function            | 给出某个命令的在线帮助信息 |
| c-h k | describe-key                 | 给出某个组合按键的帮助信息 |
| c-h t | help-with-turorial           | 启动Emacs教程            |
| c-h i | info-goto-emacs-command-node | 启动info文档阅读器        |
** 理解文件和编辑缓冲区
编辑器并不是对某个文件本身进行编辑，它会把文件的内容放到一个临时性的缓冲区（buffer）内.
** 移动光标

- c-p：上一行
- c-n：下一行
- c-b：前一个字符
- c-f：后一个字符
- c-a：移到行首
- c-e：移动到行尾
- alt-a：左移一个单词或一句
- alt-e：右移一个单词或一句
- alt-f：右移一个单词或一句
- alt-b：左移一个单词或一句
- 以ctrl开头的命令通常要比alt开头的命令移动的距离短

*** emacs对 句子的定义
如果句子的结束位置不是一个文本行的结尾，那么它最后一个标点符号的后面必须有 *两个空格* ，如果只有一个空格，那么emacs就无法分辨。
*** emacs对段落的定义
段落通常要缩进一个制表位，或者两个段落之间增加一个空白行。
*** 分页符
emacs的分页符是由变量page-delimiter定义的，文本模式里的分页符是一个进纸换页字符，其作用是告诉打印机前进到下一个打印页再继续打印。
**** 插入分页符的方式
- c-q c-l （说明：c-q表示引用，作用是把c-l插入到文件中去，而不是去重新绘制屏幕）
*** 移动的光标移动

- c-p：上一行
- c-n：下一行
- c-b：前一个字符
- c-f：后一个字符

*** 移动到确定的行
- alt-x goto-line n：把光标移动到文件的第n行
- alt-x goto-char n：把光标移动到文件的第n个字符

（上述两个命令都是从文件头开始计数）
*** 命令的重复执行
1. alt n  (n代表重复执行的次数，比如alt 500 c-n，表示向下移动500行）
2. c-u n ：重复执行n次
*** 重新绘制屏幕
c-l：重新绘制屏幕，光标移到屏幕中间
*** 光标移动命令速查
| 键盘操作 | 命令名称            | 动作                      |
|----------+---------------------+---------------------------|
| c-f      | forward-char        | 光标右移一个字符          |
| c-b      | backward-char       | 光标左移一个字符          |
| c-p      | previous-line   | 光标上移一行              |
| c-n      | next-line           | 光标下移一行              |
| alt-f    | forward-word        | 光标右移一个单词          |
| alt-b    | backward-word       | 光标左移一个单词          |
| c-a      | beginning-of-line   | 光标移动到行首            |
| c-e      | end-of-line         | 光标移动到行尾            |
| alt-a    | backward-sentence   | 光标右移一个句子          |
| alt-e    | forward-sentence    | 光标左移一个句子          |
| alt-}    | forward-paragraph   | 光标往下移一个段落        |
| alt-{    | backward-paragraph  | 光标上移一个段落          |
| c-v      | scroll-up           | 屏幕上卷一屏              |
| alt-v    | scroll-down         | 屏幕下卷一屏              |
| c-x }    | forward-page        | 光标下移一页              |
| c-x {    | backward-page       | 光标上移一页              |
| alt-<    | beginning-of-buffer | 光标移到文件头            |
| alt->    | end-of-buffer       | 光标移到文件尾            |
| 无       | goto-line n         | 光标移动到文件的第n行     |
| 无       | gogo-char n         | 光标移动到文件的第n个字符 |
| c-l      | recenter            | 重新 绘制屏幕，当前行放到屏幕中心 |
| alt n    | digit-argument      | 重复执行n次后续命令               |
| c-u n    | universal-argument  |重复执行n次后续命令 ，n可以省略，默认重复4次                     |

*无表示这个命令没有对应的快捷方式，要执行此命令时必须先按下alt-x，在输入命令的全名。*

** 文本的操作
*** 文本的删除
- c-x u：撤销最近一次的操作
- c-d（delete-character）：删除光标处的字符
- Alt-D（Kill-Word）：删除光标处单词的右侧部
- C-K（Kill-Line）：删除光标到行尾之间的文本，在空白行上执行这个命令，可以删除该空白行。所以删除一行一般要执行两次这个命令，一次是删除该行的文本，一次是删除这个空白行。
- alt-c-k：删除行首到光标的文本。
*** 恢复已经删除的文本
c-y：恢复删除文本
*** 删除环
删除的东西，包括c-k、c-w（剪切）、alt-w（复制）……所有的删除、复制和剪切的东西都会放入删除环。
*** 文本删除命令速查
| 键盘操作      | 命令名称                | 动作                   |
|---------------+-------------------------+------------------------|
| c-d           | delete-char             | 删除光标位置的字符     |
| backspace     | delete-backward-char    | 删除光标左面的字符     |
| alt-d         | kill-word               | 删除光标位置右边的单词 |
| c-k           | kill-line               | 删除光标到行尾的文本   |
| alt-k         | kill-sentence           | 删除光标右边的句子     |
| c-x backspace | backward-kill-sentence  | 删除光标左边的句子     |
| c-y           | yank                    | 恢复被删除的文本       |
| c-w           | kill-region             | 剪切文本块             |
| 无            | kill-paragraph          | 删除光标后的段落       |
| 无            | backward-kill-paragraph | 删除光标前的段落       |
|               |                         |                        |
*** 文本块及其编辑操作
- c-@或c-space设置文本标记，然后移动光标，选择文本块
- c-x c-x：检查文本块的选择是否正确
- c-w：剪切
*** 恢复早先的删除
- c-y：恢复上次删除（粘贴）
- alt-y：连续恢复上次删除的文本

** 段落重排（alt－q）
如果是在自动换行模式里，Emacs会自动在每行末尾添加一个换行符； 这样，每
一行的长度都差不多，文件看起来也就比较整齐美观。 当然，这种效果只会出
现在第一遍草稿中。 随着编辑工作的进行，肯定会有一些语句被改的长长短短，
整个文件的格式不可能再像当初那样整齐类。 经过编辑后，有些文本行会变短，
有些问本行会长得超出屏显画面的边界。 Emacs不会主动重排文本。 如果想让
文件重新恢复到当初的整齐效果，必须给出一个匀空（fill）命令。 重排文本
最简单的方法是利用alt－q，执行fill－paragraph命令。
** 编辑技巧和快捷键
*** 交换位置
- c-t：交换光标位置和光标左边两个字符的位置
- alt-t：交换光标前后两个单词的位置
- c-x c-t：交换光标所在行和光标上一行的位置
*** 位置交换命令速查
| 键盘操作 | 命令名称             | 动作               |
|----------+----------------------+--------------------|
| c-t      | transpose-chars      | 交换两个字符的位置 |
| alt-t    | transpose-words      | 交换两个单词的位置 |
| c-x c-t  | transpose-lines      | 交换两行文本的位置 |
| 无       | transpose-sentences  | 交换两个句子的位置 |
| 无       | transpose-paragraphs | 交换两个段落的位置 |

*** 改变字母的大写和小写
| 操作       | 作用                 |
|------------+----------------------|
| alt-u      | 光标右侧小写变大写   |
| alt alt－u | 光标作则小写变大写   |
| alt－C     | 把光标处的小写变大写 |
*** 定制emacs
**** .emacs文件
.emacs文件是emacs的初始化文件，定义了emacs启动时可以自动执行的命令。  
**** 编辑.emacs文件的流程
- 进入emacs
- 输入c-x c-f ~/.emacs，回车
- alt->，移动到文件末尾
- 输入命令语句
- c-x c-s保存
* 第三章 查找和替换操作
** 查找操作
*** 查找的种类
1. 简单查找
2. 递增查找
先输入c-s（想文件尾查找，c-r，倒过来，向文件头查找），再输入想要查找的文本，emacs会根据输入的每个字符进行查找匹配，在文档中标记显示。找到后如果不是所需要的，则再次按下c-s继续查找。
3. 单词查找
4. 正则表达式查找
5. 递增正则表达式查找

一个注意点：当emacs正在进行查找操作的时候，c－g的作用有点小变化，按一次c-g只会回到emacs刚才找到的地方，光标将在最后一个字符上，而这次查找操作没有取消，按两次c-g才能彻底取消这次查找操作，回到最初开始查找操作的地方。

** 替换操作
*** 基本的查找替换操作
alt-x replace-string，输入查找字符，回车，再输入替换字符
*** 查询替换操作
emacs 在找到每一个字符串后，会询问是否替换。alt-%

* 第四章 使用编辑缓冲区和窗口
** 文件、编辑缓冲区和窗口
*** 缓冲区
**** 有文件关联的缓冲区
Emacs中的一切操作都发生的编辑缓冲区（buffer）中， 一个编辑缓冲区一般是某个文件的工作副本。
**** 没有文件关联的缓冲区
除了工作在文件副本上的编辑缓冲区，还有只能用于临时工作去的缓冲区，这些缓冲区没有关联文件，适合用来做练习或打草稿。  
**** 特殊缓冲区
由Emacs创建和负责，这些内部编辑缓冲区的名字通常采用“*buffer name*”的格式， 如“*help*”、“*scratch*”、“*mail*”和“Buffer List*”等等。
*** 窗口的概念
窗口是用来显示编辑缓冲区内容的区域，即需要一个窗口来查看一个编辑缓冲区
** 使用窗空进行编辑
*** 创建上下排列的窗口
c-x 2： 上下分割当前窗口
*** 创建左右排列的窗口
- c-x 3：左右分割当前窗口
- c-x < ：左右分割的窗口中的文本向做移动
- c-x > ：左右分割的窗口中的文本向右移动
*** 窗口之间移动
c-x o ：（o代表other）
*** 多窗口操作总结
| 按键    | 命令                             | 说明                             |
| c-x 2   | split-window-vertically          | 垂直拆分窗口                     |
| c-x 3   | split-window-horizontally        | 水平拆分窗口                     |
| c-x o   | other-window                     | 选择下一个窗口                   |
| c-m-v   | scroll-other-window              | 滚动下一个窗口                   |
| c-x 4 b | switch-to-buffer-other-window    | 在另一个窗口打开缓冲             |
| c-x c-o | display-buffer                   | 在另一个窗口打开缓冲，但是不选中 |
| c-x 4 f | find-file-other-window           | 在另一个窗口自打开文件           |
| c-x 4 d | dired-other-window               | 在另一个窗口打开文件夹           |
| c-x 4 m | mail-other-window                | 在另一个窗口写邮件               |
| c-x 4 r | find-file-read-only-onter-window | 在另一个窗口以只读的方式打开文件 |
| c-x 0   | delete-window                    | 关闭当前窗口                     |
| c-x 1   | delete-other-windows             | 关闭其他窗口                     |
| c-x 4 0 | kill-buffer-and-window           | 关闭当前窗口和缓冲               |
| c-x ^   | enlarge-window                   | 增高当前窗口                     |
| c-x {   | shrink-window-horizontally       | 将当前窗口变窄                   |
| c-x }   | enlarge-window-horizontally      | 将当前窗口变宽                   |
| c-x +   | balance-window                   | 所有窗                              |
** 在文档中使用书签
用多个文档进行工作的时候，想要记住自己刚才编辑的地方，是一件很不容易的地方，emacs准备了书签功能，这是一种记录文件位置的简单方法。

假设正在编辑的文件有一个很长的路径名，每次启动emacs时都必须输入长长的路径名，相当的不愉快，可以在这个文件里设置一个书签——假设给书签起名“current project”，利用这个书签，就可以让emacs自动查找并打开这个文件，然后把光标放到当初设置这个书签时所指定的位置。

书签使文件中的定位工作边的简单了，特别是当当前项目比较复杂时，在文件里设置一些书签就能够快速的到达

创建书签的时候，emacs将在主目录中创建一个名为“.emacs.bmk”的书签文件，emacs会在退出时自动把新的书签添加到这个文件里。
*** *书签的设置*
c-x r m（命令名是bookmark-set），或者从“bookmarks”菜单执行“set bookmark（设置书签），emacs会提示给书签输入一个名字，书签名的长度理论上没有限制（但实践中不能超过屏幕的宽度），书签名中可以包括空格，如果是第一次在编辑的文件中使用书签，emacs会把文件名放在一对括号里作为默认书签
*** *移动到书签的位置*
c-x r b（命令名是bookmark-jump
*** *书签的重命名和删除*
**** *重命名书签*
alt-x bookmark-rename
**** *删除书签*
alt-x bookmark-delete
*** *和书签清单有关的操作*
c-x r l —— emacs把所有的书签都列在这个清单里。
**** *相应的操作*
| 按键 | 功能                                           |
|------+------------------------------------------------|
| d    | 给书签加上待删除标记                           |
| x    | 删除有d标记的书签                              |
| r    | 对书签重命名                                   |
| s    | 保存清单里的全部书签                           |
| f    | 显示光标位置上的书签                           |
| m    | 给书签加上待显示标记                           |
| t    | 切换书签关联文件的路径的显示状态，显示或不显示 |
| w    | 显示书签关联文件的路径                         |
| q    | 退出书签清单                                         |
** 临时性的挂起emacs*
c-z：把emacs的运行暂停
*** 字符终端
会回到unix系统的命令行提示符。
**** *返回emacs
1. 在终端输入fg命令
2. 在终端输入exit命令
*** X窗口下
emacs窗口将缩小为一个图标（相当于最小化）。
** 使用多个X窗口进行编辑*
如果使用X窗口系统，那么就不局限于emacs窗口，还可以使用多个X窗口进行工作（即打开多个emacs窗口）。Emacs把X窗口称为“窗格”（frame），这是为了与Emacs窗口区分开来。

Emacs有一整套完整的用来对窗格进行操作的命令，这些命令与Emacs窗口操作命令很相似

- 显示搜索的文件
  - c-x 4 f    在新的窗口中显示（单个emacs的多个窗口）
  - c-x 5 f    在新的窗格中显示（相当于新开一个emacs）
*** 窗格操作命令
 - c-x 5 2 ：创建一个新窗格（frame）——相当于新开一个emacs。命令名为：make-frame。
 - c-x 5 0：删除窗格
  
* 第五章 Emacs 工作环境
** 在shell编辑缓冲区里执行UNIX命令
*** 一次执行一条UNIX命令
alt ！
把命令结果输入到文件中： c-u alt ！
*** 使用shell模式
alt x shell
在emacs的shell模式中终止命令，需要使用c-c c-c的组合
alt-p 上一条命令
c-x c-o 删除上一条命令的输出
* 第八章 简单的文字排版和特效编辑
** Emacs具有的排版功能
- 以各种方式对文本进行缩进
- 使单词、文本行和文本段落剧中
- 绘制简单的框图、草图和图片，并且将它们插入文件或者电子邮件（其它字处理器器和图形工具包大都不具备这个功能）
- 排列而不是按行进行编辑（特别适合用来创建和修改表格）。在Emacs里，这项功能被成为矩形编辑（rectangle editing）
- 用大纲模式（outline-mode）隐藏和显示文档的某些部分
** 文本的缩进
***  制表位的使用
*** 设置制表位
默认情况下，制表位之间的间隔是8个字符，Emacs允许改变制表位的位置，输入“ alt-x edit-tab-stops”
*** 文本缩进模式（indented text mode）
适合用来拟定大纲，进入文本缩进模式的方式：alt-x indented-text-mode
        
