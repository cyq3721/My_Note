#+title: 兄弟连php教程
#+author: ShadowFish
#+data:[2018-12-05 Wed]
#+html_head: <link rel="stylesheet"  type="text/css" href="./css/worg-classic.css" />
#+startup:indent
* 第1章 LAMP网站构建
** 本章指引
本章对动态网站构建做了比较全面的介绍，可以使读者对建站有一个宏观的了解，例如，动态网站隶属于哪一种架构的软件、开发它都需要掌握哪些Web构件，并对每个Web构件在动态网站开发中扮演的角色、运行原理及运行的条件做了说明。本章还从不同角度对比介绍了不同的网站开发平台，其中对LAMP平台（Linux、Apache、MySQL和PHP的组合），从版本发展、行业应用、市场优势和产品特q性等方面做了重点介绍。LAMP组合是日后动态网站软件构建的发展趋势，通过本章的学习，读者能够了解LAMP平台，并为PHP的学习提前准备需要了解的内容。如果要掌握如何构建一个专业的动态网站，请不要跳过本章。本章不包含任何程序代码，专业技术词语也并不是很多，阅读起来容易理解。所以，请将这一章全部读完吧！本章不仅有你必须掌握的专业术语，也会对你后期的学习大有帮助，可以指引你在Web开发方面的学习方向。
** 介绍Web给你认识
***  B/S软件的体系结构
- C/S 体系结构 —— 客户端/服务器结构， 如qq，必须安装客户端软件
- B/S 体系结构 —— 浏览器/服务器结构，只需要在浏览器输入网址
*** Web的特点
- 图形化
  Web非常流行的一个很重要的原因就在于它可以在一页上同时显示色彩丰富的图形和文本。在Web之前，Internet上的信息只有文本形式。Web可以提供将图形、音频、视频信息集合于一体的特性。同时，Web是非常易于导航的，你只需要从一个链接跳到另一个链接，就可以在各页各站点之间进行浏览了。
- 与平台无关
  无论你的系统平台是什么，你都可以通过网络访问网站。浏览网页对你的系统平台没有什么限制。无论是通过Windows平台、Linux/UNIX平台、Mac平台还是其他平台，我们都可以访问网站。对网站的访问是通过浏览器软件来实现的。
- 分布式的
  大量的图形、音频和视频信息会占用相当大的磁盘空间，我们甚至无法预知信息的多少。对于Web而言，没有必要把所有信息都放在一起。信息可以放在不同的站点上，只需要在浏览器中指明这个站点就可以了，这样就使在物理上并不一定在一个站点的信息在逻辑上一体化，但从用户的角度来看这些信息是一体的。
- 动态的
  由于各Web站点的信息包含站点本身的信息，信息的提供者可以经常对站上的信息进行更新，如某个协议的发展状况、公司的广告等。一般各信息站点都尽量保证信息的时间性。所以Web站点上的信息是动态的、经常更新的，这一点是由信息的提供者保证的。
- 交互的
  Web的交互性首先表现在它的超链接上，用户的浏览顺序和所到站点完全由他自己决定。另外，通过“表单”的形式可以从服务器方获得动态的信息。用户通过填写表单可以向服务器提交请求，服务器可以根据用户的请求返回相应信息。
*** Web应用的优势
- 基于浏览器，具有统一的平台和UI体验。
- 无须安装，只要有浏览器，随时随地使用。
- 总是使用应用的最新版本，无须升级。
- 数据持久存储在云端，基本无须担心丢失。
- 新一代Web技术提供了更好的用户体验。
*** Web 2.0 时代的互联网
Web 2.0 更注重用户的交互作用，用户既是网站内容的浏览者，也是网站内容的制造者。
*** Web开发标准
W3C推行的主要规范有HTML、CSS、XML、XHTML和DOM
*** 认识脚本语言
常见的脚本语言有PHP、HTML、CSS、JavaScript、VBScript、ActionScript、MAXScript、ASP、JSP、SQL、Perl、Shell、Python、Ruby、JavaFX、Lua、AutoIt等。

** 动态网站开发所需的Web构件
- 客户端IE/Firefox/Safari等多种浏览器。
- 超文本标记语言（HTML）。
- 层叠样式表（CSS）。
- 客户端脚本编程语言JavaScript。
- Web服务器Apache/Nginx/TomCat/IIS等中的一种。
- 服务器端编程语言PHP/JSP/ASP等中的一种。
- 数据库管理系统MySQL/Oracle/SQLServer等中的一种。
*** 客户端浏览器
*** 超文本标记语言（HTML）
*** 层叠样式表（css）
*** 客户端脚本语言（JavaScript）
*** Web服务器
*** 服务器端编程语言
*** 数据库管理系统
** http协议与web的关系
*** http协议概述
- 客户端连接到web服务器
- 发送http请求
- 服务器接受请求并返回http响应
- 释放tcp连接
- 客户端浏览器解析HTML
* 第2章 Html的设计和应用
** 网页制作概述
- HTML是Web页面描述性语言，主要用来在Web上发布信息，以及简单地布局。
- CSS是层叠样式表，是网页页面排版样式标准，能够将格式和结构分离，使浏览器的界面更加友好。
- JavaScript是一种描述性脚本语言，和CSS一样可以嵌入到HTML中，在客户端计算机中执行。JavaScript是具有交互性的Web设计的最佳选择，也是浏览器普遍支持的语言。
*** html基础
HTML（HyperTextMarkedLanguage）即超文本标记语言，是一种用来制作超文本文档的简单标记语言。我们在浏览网页时看到的一些丰富的影像、文字、图片等内容都是通过HTML表现出来的。用HTML编写的超文本文档称为HTML文档，它能独立于各种操作系统平台，一直被用作WWW（万维网）的信息表示语言。对于网站软件开发人员来讲，如果不涉及HTML语言是不可能的。

- 所谓超文本，是因为它不仅是可以加入文字的文本文件，还是可以加入链接、图片、声音、动画、影视等内容的文本文件。使用HTML语言描述的文件，需要通过Web浏览器显示出效果。HTTP协议的制定使浏览器在运行超文本时有了统一的规则和标准。
- 所谓标记语言，是在纯文本文件里面包含了HTML指令代码。这些指令代码并不是一种程序语言，它只是一种排版网页中资料显示位置的标记结构语言，易学易懂，非常简单。在HTML中每个用来作为标签的符号都是一条命令，它告诉浏览器如何显示文本。这些标签均由“<”和“>”符号，以及一个字符串组成。而浏览器的功能是对这些标记进行解释后，显示出文字、图像、动画或播放声音。
- HTML文件必须使用.htm或者.html作为文件扩展名，推荐使用.html是比较安全的做法。

** Html语言的语法
*** html标签和元素
在HTML文件中是以标签来标记网页结构和显示内容资料的。以“<标签名>”表示标签开始，以“</标签名>”结束。大部分标签都是成对出现的，成对的标签也称为容器。在一对标签中也可以嵌套其他标签。一个HTML标签及标签中嵌套的内容就是网页中的一个“HTML元素”。例如，在<body>和</body>之间的是主体元素；又如，<title>和</title>是标签，而<title>RumpleStiltskin</title>则是标题元素。也有极少的标签不需要与之配对的结束标签，也称为空标签，即空元素，例如<br>、<hr>等。</body>和</title>关闭它们各自的标签。所有的HTML标签都要关闭。尽管老版本的HTML允许某些标签不关闭，但最新的标准要求所有的标签都要关闭。无论如何，闭合标签是一个好习惯。并不是所有的标签都像<html></html>一样关闭，有的标签不用绕在内容外面，它们是自关闭的。比如断行的标签是这样的：<br/>。需要记住的是，所有的标签都必须关闭，以及大部分的内容都在标签之间，它们的格式是这样的：起始标签内容闭合标签。如图22所示为一个HTML区块元素。
*** HTML语法不区分字母大小写
html的标签名和属性都是不区分子母奶大小写的。
*** html标签属性
属性是为html元素提供的附加信息，总是以“名称=值”对的形式出现在html标记的起始标签内，如果有多个属性，则用空格隔开，各属性之间无先后次序，html标记中的每个属性都是可选的，可以省略采用默认值。属性的值可以用双引号（“”）或者单引号（‘’）引起来，也可以不使用引号，推荐使用双引号（W3C规范）。
*** HTML颜色值的设置
颜色值是一个关键字或一个RGB格式的数字。仅仅只有16种颜色的英文名称可以作为关键词被识别，剩下的用十六进制表示。十六种可以被识别的颜色名称：aqua、black、blue、fuchsia、gray、green、lime、maroon、olive、purple、red、silver、teal、white、yellow。

十六进制的颜色值用红、绿、蓝（RGB）的值组成，没种颜色的最小值为0（十六进制：#00），最大值为255（十六进制：#FF），即每种颜色有256中彩度，所以三种颜色可以混合成16777216种颜色
*** html文档注释
以 “<!--“开始，以 "-->"结束。
*** html字符实体
一些字符在html拥有特殊的含义，不可以直接在网页中输出。 如果我们想在浏览器中能正确的显示这些含有特殊含义的字符，则必须在html源码中使用字符实体。

字符实体有三部分组成：
- 一个和号（&）
- 一个实体名称或者使用#加实体编号
- 一个分号；结尾

  常用的html实体：
  | 显示内容 | 描述             | 实体名称 | 实体编号 |
  |          | 空格             | &nsp;    | &#160;   |
  | <        | 小于号           | &lt;     | &#60;    |
  | >        | 大于号           | &gt;     | &#62;    |
  | &        | 和号             | &amp;    | &#38;    |
  | "        | 引号             | &quot;   | &#34;    |
  | '        | 撇号（IE不支持） | &apos;   | &#39;    |
  | x        | 乘号             | &times； | &#215;   |
  | ÷        | 除号             | &divide; | &#247;   |

** html文件的主体结构
#+begin_src html
  <html>
    <head>
      ……
    </head>

    <body>
      ……
    </body>
  </html>
#+end_src

说明：
- 第一部分：<html>和</html>是网页文件的最外层标签，html文件中所有的内容都应该在这两个标记之间。 <html>标签告诉浏览器这个html文件的开始点。 </html>标签告诉浏览器这是html文件的结束点。
- 第二部分：位于<head>和</head>标签之间的文本是头信息，放在<html>元素的最上面使用，头信息不会显示在浏览器窗口中。 主要包括当前页面的一些基本描述的语句，用于说明文件的标题和整个文件的一些公共属性，例如声明网页的标题和关键字等。每个<html>元素应当包含一个<title>元素以指示文档的标题，它也可以以任意顺序包含<base>、<object>、<link>、<style>、<script>、<meta>元素的任意组合。

** html文档头部元素<head>
主要包括页面的一些基本描述语句，以及CSS和JavaScript，一般都可以定义在头部元素中。它用于包含当前文档的有关信息。 例如网页标题和关键字等。 通常位于头部的内容都不会在网页上直接显示， 而是通过另外的方式起作用。在<html>中可以使用的标记不多，包含一些常见的如：<title>、<base>、<link>、<meta>等标记。 注意，<html>和</html>之间必须有<title>.
*** <title>元素
编写每个页面时，应该给其指定一个标题。 html文件的标题使用<title>元素， <title>是<head>元素的子元素，用于将内容显示在浏览器的标题栏中，用于说明文件的用途，也可以作为浏览器中书签的默认名称。 每个html文档都应当有标题，在浏览者保存该网页后成为保存后的网页的文件名。 另外，搜索引擎在收录该页面时，将网页标题作为搜索的关键字。
*** <base>元素
当浏览器遇到相对URL时，<base>实际上是将相对URL转化为完整的绝对URL。 <base>元素允许用户指定页面的基URL，这样，当浏览器遇到相对URL时，将在它们的前面添加基URL。在网页文档中，所有的相对地址形式的URL都是相对于这里定义的基URL而言的。 例如，如果在<base>中指定基URL为http://yun.itxdl.cn , 那么，在网页中出现的相对链接“test.html”将对应为http://yun.itxdl.cn/test.html 的页面。因此，如果网页位置发生变化，可以通过修改<base>来适应者一变化。 一篇文档中的<base>标记最多只能有一个，而且必须放于头部，并且应该在任何包含URL地址的语句之前
*** <link>元素
<link>元素可以用于创建到CSS样式表的链接，始终是空元素，用于描述两个文档之间的链接关系。一个最有用的应用就是链接CSS。 浏览器会分析<link>中的内容，自动读取并加载相应的文件。
*** <meta>元素
通过<meta>标记的属性来定义文件信息的名称、内容等。这个标记是实现元数据的主要标记，它能够提供文档的关键字、作者、描述、编码和语言等多种信息。 在html的头部可以包含任意数量的<meta>标记。 通过标记中的http-equiv、name、content属性，可以建立多种多样的效果和功能。

** html文档主体标记<body> </body>

** 文字版面的编辑
*** 格式标签
| 标签     | 描述                                                                             |
| <br>     | 换行，如果有多个换行，可以连续使用多个<br>                                       |
| <p>      | 段落标签，即换行之后插入一个空行                                                 |
| <center> | 居中对齐                                                                         |
| <pre>    | 与格式化标记，保留文字在源码中的格式，页面中显示的和源码中书写的格式效果完全一致 |
| <li>     | 列表项，每个列表项使用一个<li>                                                   |
| <ul>     | 无序列表，使用<ul>作为无序的声明，使用<li>作为每个项目的起始                     |
| <ol>     | 有序列表，可以显示特定的项目顺序，与无序列表使用方式基本相同                     |
| <hr>     | 水平分隔线                                                                       |

*** 文本标签
| 标签     | 描述                                         |
| <hn>     | h1--h6，6级标题，自动换行插入一个空行        |
| <b>      | 粗体                                         |
| <i>      | 斜体                                         |
| <u>      | 下划线                                       |
| <sub>    | 文字下标                                     |
| <sup>    | 文字 上标                                    |
| <font>   | 字体标记，可以指定字体大小、颜色、字体等信息 |
| <tt>     | 打字机字体                                   |
| <cite>   | 用于引证，举例，通常为斜体                   |
| <em>     | 表示腔调，通常为斜体                         |
| <strong> | 表示腔调，通常为斜体                         |
| <small>  | 小型字体标签                                 |
| <big>    | 大型字体标签                                       |

** 创建图像和链接
*** 插入图片
使用<img />标记插入图片，在web页面中通常使用jpeg、gig、png三种格式的图片。
#+begin_src html
  <img src="URL" alt="text" width="" height="" border="" />
#+end_src
**** <img>的说明
- alt属性不可以缺少。它有三个作用：
  1. 如果图像下载完成，将鼠标放在该图像上，会出现由这个属性指定的提示性文字。
  2. 如果图像没有下载成功，则图像的位置上将会这个这个属性指定的文字
  3. 搜索引擎可以通过这个属性的文字抓取图片
- width和height属性用于指定图像的宽度和高度。如果需要等比例缩放，只需要只用一个就可。
- border用于指定图像边框的宽度。
*** 建立锚点和连接
定义锚点和超链接都使用<a>标记，语法格式如下：
#+begin_src html
  < a href=" URL" name=" name" target=" target"> 链接 文字</ a> <!-- 在 网页 中 定义 锚 点 和 链接-->
#+end_src
**** 属性说明
- href
  指定链接文件的URL路径。
  - name
  指定页面锚点的名称，如果需要链接到对应的锚点的位置，则需要在锚点名称前面加一个#字符
  - target
  指定要打开的链接所使用的浏览器窗口名称。可以使用自定义的窗口名称，也可以使用下面四个内置的窗口名称。
  - _self: 在当前窗口中打开链接文件，是默认值
  - _blank: 开启一个新的窗口打开链接文件
  - _parent: 在父级窗口中打开文件，常用于框架页面
  - _top:在顶层窗口中打开文件，常用于框架页面
** 使用html表格
*** 常用标签
- <table>
- <tr>
- <th> 、<td>
s- <caption>  表格标题
*** 常用属性
- align
- border
- cellspacing  单元格间距
- cellpadding   单元格内容和边框间距
- rowspan 横向合并
- colspan 竖向合并
** html框架结构<frameset>
使用html框架结构可以把一个浏览器窗口划分为若干个小窗口，每个小窗口可以显示不同的url网页，每个框架里的网页相互独立。
*** 划分框架
使用<frameset>标签决定如何划分框架, 用<frameset>取代<body>, 如果保留body标签，则无法显示框架。常用属性如下
| 属性        | 描述                                                 |
| cols        | 用“像素数”和“%”分隔左右窗口，“*”表示剩余部分         |
| rows        | 用“像素数”和“%”分隔左右窗口，“*”表示剩余部分         |
| frameborder | 指定是否显示边框：“0”表示不显示边框，“1”代表显示边框 |
| border      | 设置边框粗细，默认值是5像素                                       |
*** 子窗口<frame>标签的设定
<frame>是一个单标签，该标签必须放在框架集<frameset>中使用。<frameset>设置了几个子窗口，就必须对应几个<frame>标签，而且每一个<fram>标签内还必须使用src属性设定一个网页文件，常用属性如下
| 属性        | 描述                                                                          |
| src         | 指示加载的URL文件的地址                                                       |
| name        | 指示框架名称                                                                  |
| noresize    | 指示不能调整窗口的大小，省略此项时就可调整                                    |
| scrolling   | 指示是否需要滚动条，auto表示根据需要自动出现，Yes表示有滚动条，No表示无滚动条 |
| frameborder | 指示是否要边框，1表示显示边框，0表示不显示边框（）不提倡使用yes或no           |
| border      | 设置边框粗细                                                                        |

*** 窗口的名称和链接
如果要在窗口中做链接，就必须对每一个子窗口命名，以便被用于窗口间的链接。 在窗口的链接中使用target属性，就可以讲被链接的内容放置到想要放置的窗口内。
** HTML表单设计
在表单中提供了多种输入方式，包括文本输入域、单选或多选按钮、下拉式列表域等。表单是网页上由<form>标签定义的一个特定区域，而表单的各种输入域可以由
- <input>
- <select>
- <textarea>
  3个标签定义
*** 表单标签<form>
一个表单用<form></form>标签来创建，即定义表单的开始和结束的位置，在开始和结束标签之间的一切定义都属于表单的内容。 单击提交按钮时，提交的也是表单范围内的内容。form的常用属性：
| 属性    | 描述                               |
| name    | 表单名称                           |
| method  | 提交方式，可以用get或post          |
| action  | 跳转到的网址，绝对或相对地址都可以 |
| enctype | 设置表单的编码方式                 |
| target  | 指定目标窗口                             |
*** 文本域和密码域
<input>标签是个单标签，没有结束标记。 <input type=" ">用来顶一个用户输入区，具体是哪一种类型，由type属性来决定。文本和密码输入域 是一个单行文本 框， 它们基本相似， 唯一不同的是， 用户在密码域中输入的字符并不以原样显示， 而是将每个字符 用“*” 代替。 文本和密码 输入域的基本语法格式 如下：
#+begin_src html
  <input type="text" name="field_name" value="field_value" size="n" maxlenght="n">
  <input type="password" name="field_name" value="field_value" size="n" maxlenght="n">
#+end_src

<input>标签的常用属性
| 属性      | 描述                                                 |
| type      | 文本输入域，可以去text或password                     |
| name      | 定义控件名称                                         |
| value     | 指定控件的初始值，就是浏览器被打开时文本框显示的内容 |
| size      | 指定控件宽度，表示该文本框所能显示的最大字符数       |
| maxlength | 表示该文本框允许用户输入的最大字符数                                   |
*** 提交、重置、和普通按钮
在<input>标签中，当type属性值为“submit”时，表示这是一个提交按钮，单击提交按钮后，可以实现表单内容的提交；当type属性为“reset”时，表示这是一个重置按钮，单击重置按钮，表单内容将恢复默认值；当type属性为“button”时，表示这是一个普通按钮，并不实现任何功能，需要和javascript等脚本语言一起使用。button按钮必须定义在form之间
#+begin_src html
  <input type = "submit" name = "field_name" value = "field_value">     <!-- 提交按钮 -->
  <input type = "reset" name = "field_name" value = "field_value">     <!-- 重置按钮 -->
  <input type = "button" name = "field_name" value = "field_value">     <!-- 普通按钮 -->
#+end_src
*** 单选按钮和复选框
#+begin_src html
  <input type="radio" name="field_name" value="field_value" checked>     <!--单选按钮-->
  <input type="checkbox" name="field_name" value="field_value" checked>     <!--复选框-->
#+end_src
*** 隐藏域
隐藏域不会在表单中显示。如果需要再页面之间传递重要数据，则在<input>标签中设置type属性值为“hidden”
#+begin_src html
  <input type="hidden" name="field_name" value="field_value">  <!--隐藏表单域-->
#+end_src
*** 多行文本域
使用<textarea>制作多行文本域
#+begin_src html
  <textarea name="name" rows="n" cols="n" value="value">
  </textarea>
#+end_src
*** 菜单下拉列表域
使用<select>标签创建一个菜单下拉列表域
#+begin_src html
  <select name="name" size="n" multiple>
    <option value="value" selected>选项</option>
    <option value="value" >选项</option>
    ...
  </select>
#+end_src
multiple表示多选

* 第3章 层叠样式表
** 本章指引
HTML使用标签将内容放到网页上，也可以使用元素和属性来控制简单的文档外观。 如果希望更全面的控制Web页面的外观和布局， 则需要使用层叠样式表（简称CSS）。CSS规范的工作原理在于允许用户制定一些规则，描述文档中元素内容的表现形式，通过设置不同规则控制页面中每一个元素的外观，包括字体的颜色和大小、线的宽度和颜色、页面中各项之间的空白量，以便使页面看上去更令人感兴趣。

CSS是和HTML一起工作的，用来弥补HTML对网页格式化功能的不足。 既可以将HTML和CSS写在同一文件中，也可以分开编写，都是纯文本文件，也都是通过浏览器解析的。
** CSS简介
CSS是Cascading Style Sheets（层叠样式表）的缩写，是一种用来表现HTML或XML等文件样式的计算机语言。

    - 所谓样式表，是样式化HTML的一种方法。 HTML是文档的内容，而样式表式文档的表现，或者说外观
    - 所谓层叠，就是将一组样式在一起层叠使用，控制某一个或多个HTML元素，按样式表中的属性一次显示。

      一张样式表可以用于多个页面，甚至整个站点，因此CSS具有良好的易用性和扩展性。CSS特点如下：
      - 控制页面中每一个元素（精确定位）
      - 对HTML语言处理样式的最好补充
      - 把内容和格式处理相分离，减少工作量

我们可以将CSS定义在HTML文档的每个标记里，或者以<style>标记嵌入在HTML文档中，也可以在外部附加文档作为外加文档。

实例：
#+begin_src  css
  <!doctype html>
  <html>
  <head>
  <title>CSS_Test</title>
  <meta charset="utf-8" />
  <style>
  p {
      font-size: 30px;
      color: yellow;
      border: 2px solid blue;
      text-align: center;
      background: green;
  }
  </style>
  </head>
  <body>
  <p>Linux</p>
  <p>Apache</p>
  <p>MySQL</p>
  <p>PHP</p>
  </body>
  </html>

#+end_src

** CSS规则的组成
CSS的规则主要由“选择器” 和 “声明” 两部分组成， 选择器指定声明应用于哪个或哪些元素。
#+begin_src css
  p {text-indent: 3em}  /*p为选择器*/
#+end_src

声明则是用于定义样式的元素，用于设置HTML元素的样式。 如果声明和选择器一起使用，就需要将声明的部分用 { }组织在一起。 声明中可以用多个样式属性，为通过选择器找到HTML元素叠加样式。 每个样式元素都是以冒号隔开的两部分组成（属性：值）。 属性是希望影响的所选元素的特性，每个属性带一个值，共同地描述选择器应该如何呈现。 样式规则组成如下：

#+begin_src  css
  选择器  {属性1: 值1 ;  属性2: 值2 ; 属性n: 值n；}  /*声明和选择器一起使用*/
#+end_src

属性和值之间使用冒号：连接，多个属性的复合样式声明之间应该使用分号（；）隔开，最后一个属性的值后面可以不用分号。 如果同一个样式属性出现两次以上，则使用后者。 以下代码定义了h1和h2元素的颜色以及字体大小属性。
#+begin_src css
  <head>
  <title>CSS简单实例</title>
  <style type="text/css">
  h1 {font-size: x-large; color:red}
  h2 {font-size: large; color:blue}
  </style>
  </head>
#+end_src

如果直接在html元素中使用style属性声明样式， 则不需要使用{}，而是直接使用多个层叠样式元素声明在sytle属性的双引号中即可。 见如下实例：

#+begin_src css
  <h1 style="font-size: x-large; color: red">标题</h1>
#+end_src

*** css的注释
#+begin_src css
  /*这里的内容为注释，不能嵌套使用*/
#+end_src

*** 长度单位
有很多样式属性的值都有长度单位，例如fontsize、width、height、border-width等。 一个长度的值由可选的正号或负号接着的一个数字、表示单位的两个字母组成， 长度的值和单位字母之间没有空格隔开。 例如1.3 em就不是有效的长度值，1.3em是有效的。一个为0的长度不需要两个字母的单位声明。 无论是相对值还是绝对值长度， css都支持。常用的单位

- em （font-size：2em）一个大致与一个字符高度相同的单位。
- px （font-size：12px） 以像素为单位。
- pt （font-size：12pt） 以磅为单位。
- % （font-size：80%） 以百分比为单位。
- 其他单位还包括pc（活字）、cm（厘米）、mm（毫米）和in（英寸）

*** 颜色单位和URL值
有很多样式属性的值都有颜色单位，例如color、background-color、border-color等。 颜色值是一个关键字或一个RGB格式的数字。 关键字通常有16个：aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、purple、red、silver、teal、white和yellow。 RGB颜色可以有以下4种形式
  - #rrggbb（如#00cc00）
  - #rgb （如#0c0）
  - rgb（x，x，x） x是一个0-255的整数， （如rgb（0，204，0））
  - rgb（y%,y%,y%） y是一个0% - 100%的数 （如rgb（0%，80%，0%））

    另外，指定背景图片还需要使用一个URL值。 URL的格式为：url（addr），其中addr是一个rul值，可以用单引号也可以用双引号，也可以不加引号，并且在url之前或之后可以包含空格。 在url中的括号、逗号、空格、单引号或双引号必须避开反斜杠。 不完整的url会被理解为样式表的源代码，而不是html的源代码，样例如下：
    #+begin_src css
      body {background:url(xsphp.gif)}         /*不用引号*/
      body {background:url(http://www.lampbrother.net/xsphp.gif)}   /*绝对url*/
      body {background:url('xsphp.gif')}      /*使用单引号*/
      body {background:url("xsphp.gif")}   /*使用双引号*/
    #+end_src

** 在html文档中放置CSS的几种方式
*** 内联样式表
可以使用style属性内联，该属性可以应用于任意body元素，包括body本身。实例如下：
#+begin_src css
  <p style="color:red;font-family:serif"> 这段样式是红色的serif字，如果字体可用的话。</p>
#+end_src
*** 嵌入一张样式表
使用<style>元素嵌入到HTML文档中使用，<style>元素需要放在HTML文档的head部分。
*** 链接到外部的样式表
<<<<<<< HEAD
如果多个文档都要使用同一样式表，那么外部样式表会更合适。 一张外部的样式表，可以通过link元素链接到html中。
#+begin_src html
  <link rel="stylesheet" href="style.css" type="text/css" />
#+end_src
可选的type属性用于指定媒体类型，允许浏览器忽略他们不支持的样表表类型。 rel属于用于定义链接的文件和html文档之间的关系，该属性的stylesheet指定一个固定或首选的样式。 而href属性则用来指定样式文件的位置，可以是相对也可以是绝对的URL。 外部样式表文件要以扩展名.css命名。 样式表仅仅由样式规则或声明组成
#+begin_src css
  p {margin:2em}
#+end_src

*注意：* 如果同时使用内联样式表和嵌入式样式表，并设置了相同的属性，则内联样式表的优先级高，而同时使用嵌入式样式表和外部样式表并设置相同属性时，则优先级由出现的先后顺序决定。
** CSS选择器
常用的样式选择器有：
- Html选择器
- 类选择器
- ID选择器
- 组合选择器
- 关联选择器
- 伪类和伪元素
*** HTML选择器
Html标签，即HTML的标签，用来改变一个指定标签的样式。 任何HTML元素都可以是一个CSS选择器，用于找到和选择器同名的HTML元素。如：
#+begin_src css
  p {text-indent: 3em}
  h1 {color:red}
#+end_src
*** 类选择器
同一个选择器能有不同的类（class），因而允许同一个元素有不同的样式。如：
#+begin_src css
  p.dark-row {background-color: #EAEAEA;}
  p.light-row {background-color: #F8F8F8;}
  #+end_src
这些类可以在html标签中使用class属性引用，如
#+begin_src html
  <p class="dark-row">第一段</p>
  <p class="light-row">第二段</p>
#+end_src
类的申明也可以不需要相关的html元素，只用定义类选择器事去点.前面的html标记即可，如
#+begin_src css
  .note {font-size: small}  /*可以用于任何元素*/
#+end_src
*** ID选择器
在html页面中，id属性指定了某个单一元素，id选择器用来对这个单一元素定义单独的样式。 ID选择器的应用和类选择器类似，只要把class换成id即可。区别在于id只能用于唯一的元素，class没有这个限制。 定义ID选择器要在ID名称前面加一个#。实例如下：
#+begin_export css 
#main {text-indent: 3em}

<p id="main">文本缩进3em</p>
#+end_export
*** 关联选择器
关联选择器只不过是一个用空格隔开的两个或更多的单一选择器组成的字符串。这些选择器组成的字符串。这些选择器可以指定一般属性，而且因为层叠次序的规则，他们的优先权比单一的选择器要大
#+begin_src css
  table a {color: red} /*只针对table标签内内的a元素有效*/
#+end_src
*** 组合选择器
为了减少样式表的重复声明，组合选择器声明是允许的。只要用英文逗号隔开就可以。如下：
#+begin_src css
  h1, h2, h3,h4 {color:red; font-family:sans-serif}
#+end_src
*** 伪元素选择器
伪元素选择器是指对同一个HTML元素不同状态的一种定义方式。 例如，对于<a>标签的正常状态、访问的状态、选中的状态、光标移到超链接文本上的状态，就可以使用伪元素选择器来定义。 语法结构如下：
#+begin_src css
  HTML标签: 伪元素 {属性：值;}
#+end_src
每个伪元素都已英文的:开头，后面的伪元素名称根据作用不同有各自固定的写法。而冒号前面需要指定使用伪元素的HTML标签， 目前只有<a>或<p>标签可用。指定超链接元素以不同的方式显示链接（links）、光标移动到超链接上（hover links）、已访问链接（visited links）和可以激活链接（active links）时，定位伪元素可以给出link、hover、visited或active。 一个已访问的链接可以定义为不同的颜色显示，甚至不同的字体大小风格。如下：
#+begin_src css
  a:link {color:red;}
  a:hover {color:yellow; font-size:125%;}
  a:active {color:blue; font-size:125%;}
  a:visited {color:green; font-size:85%}
#+end_src

*注意：*多个css选择器同时作用在同一个HTML元素上时，声明不同的属性具有继承关系。如果声明的是相同属性，则以优先级高的选择器为主，主要选择器的优先级关系如下：
#+begin_quote
关联选择器>ID选择器>类选择器>HTML选择器
#+end_quote
** CSS常见的样式属性和值
CSS中的样式属性比较多，经常使用的属性可以分为这么几类：字体、文本、背景、边框、列表以及其他一些样式属性。
*** 字体属性
| 属性         | 描述     | 属性值                                          |
| font-famlily | 字体     | 使用字体名称，如Times、serif等                  |
| font-size    | 字体大小 | 可以使用绝对大小、相对大小、长度或百分比        |
| font-sytle   | 字体风格 | normal（普通）、italic（斜体）或oblique（倾斜） |
| font-weitht  | 字体加粗 | normal、bold、bolder或lighter等                 |
| font-variant | 字体变形 | normal或small-caps（小型小写字母                        |
*** 颜色属性
使用color属性
*** 背景属性
包括背景颜色、背景图像、背景重复、背景附件、背景位置等属性。
| 属性                  | 描述     | 属性值                                |
| background-color      | 背景颜色 |                                       |
| background-image      | 背景图像 | 图片url或none                         |
| background-repeat     | 背景重复 | repeat、repeat-x、repeat-y、no-repeat |
| background-attachment | 背景附件 | scroll（滚动）或fixed（固定）         |
| background-position   | 背景位置 | 横向的关键字（left，center，right），纵向的关键字（top，center，bottom），百分比和长度也可用来安排背景图像的位置 |

* 第7章 PHP的基本语法
** PHP能做什么
1. 收集表单数据
2. 生成动态网页
3. 字符串处理
4. 动态输出图像
5. 服务器端文件系统操作
6. 编写数据库支持的网页
7. 会话跟踪控制
8. 处理xml文件
9. 支持利用大量的网络协议
10. 服务器端的其他相关操作
* 第8章 PHP流程控制结构
** 本章指引
流程控制对于任何一门编程语言来说都是至关重要的，它提供了控制程序步骤的基本手段，是程序的核心部分。 可以说，缺少了控制流程，就不会有程序设计语言，因为现在没有哪一种程序只是线性地执行语句序列。 程序中需要与用户相互交流，需要根据用户的输入决定序列，需要有循环将代码反复执行等，这些都少不了流程控制。 在任何一门程序设计语言中，都需要支持满足程序结构化所需要的三种结构：
    - 顺序结构
    - 分支结构（选择结构或条件结构）
    - 循环结构
** 分支结构
对于要先做判断再选择的问题，就要使用分支结构，又称为选择结构或条件结构。在程序中使用分支结构可以有以下几种形式：
  - 单一条件分支结构
  - 双向条件分支结构
  - 多项条件分支结构
  - 巢状条件分支结构

*** 单一条件分支结构（if）
#+begin_src php
  if(表达式)
      语句块；
#+end_src
实例：
#+begin_src php
  <?php
      if($a > $b)

          echo "$a 大于 $b" ;
  ?>
#+end_src
通过使用复合语句（代码块），if语句能够执行多条语句。 代码块是一组用花括号{}括起来的多条语句。
#+begin_src php
  if(表达式){
      语句1；
      语句2；
      语句3；
      ……
      语句n；
  }
#+end_src
*** 双向条件分支结构（else字句）
#+begin_src php
  if (表达式)
      语句块1；
      ……
      语句块n；    
  else
      语句块1；
      ……
      语句块n；     
#+end_src
*** 多项条件分支结构（elseif字句）
#+begin_src php
  if（表达式1）
      语句块1；
  elseif（表达式2）
      语句块2；
  ……
  elseif（表达式n）
      语句块n；
  else
      语句块n+1；
#+end_src
* 第10章 PHP中的数组与数据结构
** 数组的分类
- 索引素组（indexed）
  索引素组的索引值是整数，以0开始，以此递增
- 关联数组（associative）
  关联数组以字符串作为索引值
** 数组的定义
- 直接为数组元素赋值即可声明数组。
- 使用array（）声明数组。

  使用上面两种方法声明数组时，不仅可以指定元素的值，也可以指定元素的下标，即键和值都可以由使用者定义。

*** 直接赋值的方式声明数组
语法：
#+begin_src php
  $数组名[下标] = 值;
#+end_src

*** 使用array()语言结构新建数组
语法结构：
#+begin_src php
  $数组名 = array(key1=>value1,key2=>value2,……,keyN=>valueN);
#+end_src

如果不使用key=>，忽略下标，直接使用值，默认就是索引数组
** foreach()遍历数组
#+begin_src php
  $shuzu = array(……);
  foreach($shuzu as $value){    //用于索引数组
        each $value    //依次打印数组值
      }
  // or
  foreach($shuzu as $key => $value){  //用于关联数组
      //$key 是下标；$value 是数组值；
      }
#+end_src
** 联合使用list()、each()和while循环遍历数组
*** each()函数
each()函数需要传递一个数组作为参数，返回数组中当前元素的*键/值对*，并向后移动数组指针到下一个元素的位置。如果内部指针越过了数组的末端，则each()返回FALSE。
*** list()结构
这不是真正的函数，而是PHP的语言结构。list()用一步操作给一组变量进行赋值，即把数组中的值赋给一些变量。

 #+begin_src php
   list($key,$value) = each($shuzu)
 #+end_src
*** 关于print_r
- print_r() 将把数组的指针移到最后边。使用 reset() 可让指针回到开始处。
- 可以一次性输出数组的全部内容

#+begin_src php
  <?php
$a = array ('a' => 'apple', 'b' => 'banana', 'c' => array ('x','y','z'));
print_r ($a);
?>
#+end_src

** 使用数组的内部指针控制函数遍历数组
数组的内部指针是数组内部的组织机制，指向一个数组中的某个元素。默认指向数组中第一个元素，通过移动或改变指针的位置，可以访问数组中的任意元素。对于数组指针的控制，PHP提供了以下几个内建函数可以利用。
- current()：取得目前指针位置的内容资料。
- key()：读取目前指针所指向资料的索引值。
- next()：将数组中的内部指针移动到下一个单元。
- prev()：将数组的内部指针倒回一位。
- end()：将数组的内部指针指向最后一个元素。
- reset()：将目前指针无条件移至第一个索引位置。

** 预定义数组
从PHP4.1.0开始，PHP提供了一套附加的预定义数组，这些数组变量包含了来自Web服务器、客户端、运行环境和用户输入的数据。这些数组非常特别，通常被称为自动全局变量或者“超”全局变量，它们具有以下几个特性：
- 就是一种特殊的数组，操作方式没有区别。
- 不用去声明它们， 在每个php脚本中默认存在
- 在全局范围内自动生效，在函数中直接就可以使用，且不用使用global关键词。

常见的预定义全局数组
| 预定义数组 | 说明                                                              |
| $_SERVER   | 变量由Web服务器设定或者直接与当前脚本的执行环境相关联             |
| $_ENV      | 执行环境提交至脚本的变量                                          |
| $GET       | 经由Url请求提交至脚本的变量                                       |
| $POST      | 经由HTTP POST方法提交至脚本的变量                                 |
| $REQUEST   | 经由GET、POST和Cookie机制提交至脚本的变量，因此该数组并不值得信任 |
| $_FILES    | 经由HTTP POST文件上传而提交至脚本的变量                           |
| $_COOKIE   | 经由HTTPCookies方法提交至脚本的变量                               |
| $_SESSION  | 当前注册给脚本会化的变量                                          |
| $GLOBALS   |  包含一个引用指向每个当前脚本的全局范围内有效的变量。该数组的键名为全局变量的名称                                                                |

*** 服务器变量$_SERVER
$_SERVER是一个包含诸如头信息、路径和脚本位置的数组。数组的实体由Web服务器创建，并不能保证所有的服务器都能产生所有的信息，服务器可能忽略了一些信息，或者产生了一些其他的新的信息。和其他的超全局数组一样，这是一个自动的全局变量，在所有的脚本中都有效，在函数或对象的方法中不需要使用global关键字访问它。在下面的示例中使用foreach语句，将当前Web服务器创建的超全局数组$_SERVER中的信息全部遍历出来，供用户查看。
\
#+begin_src php
  <?php
//print_r($_SERVER);
foreach($_SERVER as  $key => $value){
    echo $key . '=>' . $value . '<br>';
    }
?>
#+end_src
$_SERVER数组中的数据可以根据自己声明的脚本情况选择使用。在上面的代码中，使用foreach语句遍历出由Web服务器创建的所有全局变量，当然也可以使用print_r()函数直接输出数组中的全部内容。但在程序中只需使用$_SERVER数组中个别的数据，通过下标单独访问即可。

*** 环境变量：$_ENV

** 数组的相关处理函数
PHP中的数组功能非常强大，是在开发中非常重要的数据类型之一。数组的处理函数也有着强大、灵活、高效的特点。在PHP5中提供了近百个操作数组的系统函数，包括排序函数、替换函数、数组计算函数，以及其他一些有用的数组函数。也可以自定义一些函数对数组进行操作。

*** 数组的键/值操作函数
1. array_values()函数
   作用是返回数组中所有元素的值，它只有一个必选参数，规定传入给定的数组，返回一个包含给定数组中所有值的数组；但不保留键名，被返回的数组将使用顺序的数值键重新建立索引，从0开始且以1递增。

2. array_keys()函数
   作用是返回数组中所有的键名

3. in_array()函数
   in_array()函数的作用是检查数组中是否存在某个值，即在数组中搜索给定的值。本函数中有三个参数，前两个参数是必需的，最后一个参数是可选的。

   其函数的原型如下：boolin_array(mixedneedle,arrayhaystack[,boolstrict])

4. array_search()
   搜索给定的值，存在则返回相应的键名，也支持对数据类型的严格判断

5. array_flip()
   作用是交换数组中的键和值，返回一个反转后的数组。如果同一个值出现了多次，则最后一个键名将作为它的值，覆盖前面出现的元素。如果原数组中的值的数据类型不是字符串或整数，函数将报错。

6. array_reverse()
   作用是将原数组中的元素顺序翻转，创建新的数组并返回。

*** 统计数组元素的个数和唯一性
1. count()
   统计数组中的元素个数
2. array_count_values()
   统计数组中所有值出现的次数, 参数规定输入一个数组，返回一个数组，其元素的键名是原数组的值，键值是该值在原数组中出现的次数。
3. array_unique()
   用于删除数组中重复的值，并返回没有重复值的新数组。参数需要接收一个数组，当数组中几个元素的值相等时，只保留第一个元素，其他的元素被删除，并且返回的新数组中键名不变。

*** 使用回调函数处理数组的函数
函数的回调是PHP中的一种特殊机制，这种机制允许在函数的参数列表中，传入用户自定义的函数地址作为参数处理或完成一定的操作。使用回调函数可以很容易地实现一些所需的功能。以下将介绍几个主要的使用回调函数处理数组的函数。
1. array_filter()
   array_filter()函数用回调函数过滤数组中的元素，返回按用户自定义函数过滤后的新数组。该函数有两个参数.

   #+begin_src php
     <?php
     function myfun($var){
         if( $var % 2 == 0 )
             return true;
     }
     $array = array("a"=>1,"b"=>2;"c"=>3,"d"=>4,"e"=>5);
     print_r($array_filter($array,"myfun"));
     ?>
   #+end_src

   该函数的第一个参数是必选项，要求输入一个被过滤的数组。第二个参数是可选项，将用户自定义的函数名以字符串形式传入。如果自定义过滤函数返回true，则被操作的数组的当前值就会被包含在返回的结果数组中，并将结果组成一个新的数组。如果原数组是一个关联数组，则键名保持不变。

*** 数组与数据结构
**** 其它语言的解决方案
在强类型语言中，有专用的数据结构解决方案。 通常是创建一个容器，在这个容器中可以存储任意类型的数据，且，可以根据容器中存储的数据决定容器的容量，达到可以变长的容器结构，比如链表、堆栈及队列等都是数据结构的常用形式。 在PHP中使用数组来完成数据结构的工作。
1. 使用数组实现堆栈
   堆栈是数据结构的一种实现形式。 在堆栈中，最后压入的数据（进栈）将会被最先弹出（出栈），即采用“先进后出”的结构，使用array_push()array_pop()两个系统函数即可完成数据的进栈和出栈的操作。
2. 使用数组实现队列
   队列允许在一端插入数据，在另一端删除数据，队列遵循先进先出的原则。用array_push()在一端压入数据，用array_shift()在另一端弹出数据
*** 其它有用的数组处理函数
**** 随机函数 array_rand()
从数组中随机选出一个或多个元素并返回。
**** shuffle（）
随机排列数组 ，成功返回true，失败返回false
**** array_sum()
返回数组中所有值的总和
**** range（）
返回指定范围内的元素的数组
** 操作php数组需要注意的细节
*** 数组运算符号

