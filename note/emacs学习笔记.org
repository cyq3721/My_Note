#+title: emacs学习笔记
#+author: CHEN
#+: 2017-7-20

* Setup安装
* Package Manage 包管理器
 - m-x packagej-list-packages
 - use-package
* config配置
 - 个人喜好 ： ~/.emacs.d/init.el -(org-babel)-> ~/.emacs.d/config.org
 - 配置文件下载 ：
   - [[https://crackwallsports.github.io/testwebsite/articles/Emacs/init.el][init.el]]
   - [[https://crackwallsports.github.io/testwebsite/articles/Emacs/config.org][config.org]]
* Basic基础
** UI用户界面
  - Menu菜单栏：屏幕顶部突出 显示的条
  - Frame 框架
    + Window窗口
      - Buffer缓冲区：关联文件
  - Mode Line 模式行（状态栏）：每个窗口中横贯底部的高两条，提供当前缓冲区的信息
  - Echo Area：模式行下面底部的区域显示相关信息
  - Mode Line
     + [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]]
** Mode 模式
  - 主要模式 major-mode：  主要的编辑行为 仅用于当前缓冲区 仅有一个活动的主模式
  - 次要模式 minor-mode： 提供了一些与任何特定的主要模式无关的特性或功能 可多个
* emacs 的配置
** 配置文件
emacs的配置文件在 ~/.emacs中进行配置，重启emacs是配置生效，或者在打开~/.emacs的时候执行命令
m-x eval-buffer，可以是配置立即生效。
** 配置插件
在配置文件中输入代码：
#+begin_quote
(add-to-list 'load-path' ~/.emacs.d/lisp")
(require 'pluginname')
#+end_quote

* emacsd的插件记录
** ace-window
ace-window is an available package.

     Status: Available from gnu -- Install
    Archive: gnu

    Version: 0.9.0
    Summary: Quickly switch windows.
   Requires: avy-0.2.0
   Homepage: https://github.com/abo-abo/ace-window
   Keywords: window location 

The main function, `ace-window' is meant to replace `other-window'.
In fact, when there are only two windows present, `other-window' is
called.  If there are more, each window will have its first
character highlighted.  Pressing that character will switch to that
window.

To setup this package, just add to your .emacs:

   (global-set-key (kbd "M-p") 'ace-window)

replacing "M-p"  with an appropriate shortcut.

Depending on your window usage patterns, you might want to set

   (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

This way they are all on the home row, although the intuitive
ordering is lost.

If you don't want the gray background that makes the red selection
characters stand out more, set this:

   (setq aw-background nil)

If you want to know the selection characters ahead of time, you can
turn on `ace-window-display-mode'.

When prefixed with one `universal-argument', instead of switching
to selected window, the selected window is swapped with current one.

When prefixed with two `universal-argument', the selected window is
deleted instead.

[back]
** avy
  avy is an available package.

     Status: Available from gnu -- Install
    Archive: gnu

    Version: 0.4.0
    Summary: tree-based completion
   Requires: emacs-24.1, cl-lib-0.5
   Homepage: https://github.com/abo-abo/avy
   Keywords: point location 

This package provides a generic completion method based on building
a balanced decision tree with each candidate being a leaf.  To
traverse the tree from the root to a desired leaf, typically a
sequence of `read-key' can be used.

In order for `read-key' to make sense, the tree needs to be
visualized appropriately, with a character at each branch node.  So
this completion method works only for things that you can see on
your screen, all at once:

*** character positions
*** word or subword start positions
*** line beginning positions
*** link positions
*** window positions

If you're familiar with the popular `ace-jump-mode' package, this
package does all that and more, without the implementation
headache.

[back]
** neotree(侧边栏目录)
*** 下载neotree插件
#+BEGIN_QUOTE
# git clone https://github.com/jaypei/emacs-neotree.git neotree
# cd neotree
# git checkout dev
# cp -rf neotree ~/.emacs.d/site-lisp
#+end_quote
*** 配置插件

#+BEGIN_QUOTE
(add-to-list 'load-path "~/.emacs.d/site-lisp/neotree")
(require 'neotree)
(global-set-key [f5] 'neotree-toggle)
#+END_QUOTE
*** 快捷键
- n：next line 
- p：previous line
- SPC or RET or TAB: Open current item if it is a file. Fold/Unfold current item if
 it is a directory.
- U：Go up a directory
- g：Refresh
- A：Maximize/Minimize the NeoTree Window
- H：Toggle display hidden files
- O：Recursively open a directory
- C-c C-n：Create a file or create a directory if filename ends with a ‘/’
- C-c C-d：Delete a file or a directory.
- C-c C-r：Rename a file or a directory.
- C-c C-c：Change the root directory.
- C-c C-p：Copy a file or a directory.

————————————————
版权声明：本文为CSDN博主「慢慢的燃烧」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/u010164190/article/details/94589158
** Dired Mode

Dired Mode 是一个强大的模式它能让我们完成和文件管理相关的所有操作。

使用 C-x d 就可以进入 Dired Mode，这个模式类似于图形界面系统中的资源管理器。你 可以在其中查看文件和目录的详细信息，对他们进行各种操作，甚至复制粘贴缓冲区中的内 容。下面是一些常用的操作（下面的所有键均需在 Dired Mode 下使用），
 #+BEGIN_QUOTE
+ 创建目录
g 刷新目录
C 拷贝
D 删除
R 重命名
d 标记删除
u 取消标记
x 执行所有的标记
 #+END_QUOTE
** blcken
*** Description
Blacken uses black to format a Python buffer.  It can be called
explicitly on a certain buffer, but more conveniently, a minor-mode
'blacken-mode' is provided that turns on automatically running
black on a buffer before saving.

To automatically format all Python buffers before saving, add the
function blacken-mode to python-mode-hook:
#+BEGIN_QUOTE
(add-hook 'python-mode-hook 'blacken-mode)
#+END_QUOTE

*** READM
**** Blacken
Use the python black package to reformat your python buffers.

**** usage
The whole buffer can be reformatted with blacken-buffer. If you want to format every time you save, enable blacken-mode in relevant python buffers. Note that if blacken-only-if-project-is-blackened is non-nil, then blacken will only run if your pyproject.toml contains the [tool.black] setting. This setting is off by default.

**** customization
The following options change the behavior of black when reformatting buffers.

blacken-allow-py36 Allow using Python 3.6-only syntax on all input files.
blacken-skip-string-normalization Don't normalize string quotes or prefixes.
blacken-fast-unsafe Skips temporary sanity checks.
blacken-line-length Max line length enforced by blacken
** company-jedi
*** Description

 This is a company-backend for emacs-jedi.  Add this backend to the `company-backends' and enjoy the power. e.g.

#+BEGIN_QUOTE
 ;; Basic usage.
 (add-to-list 'company-backends 'company-jedi)
 ;; Advanced usage.
 (add-to-list 'company-backends '(company-jedi company-files))
#+END_QUOTE

 Check https://github.com/company-mode/company-mode for details.

*** Installation
company-jedi is available on MELPA.  You can install company-jedi with the following command.

M-x package-install [RET] company-jedi [RET]

注意：
#+BEGIN_QUOTE
Please do not install jedi package for company users, it is an auto-complete plugin of jedi
#+END_QUOTE

For el-get users
#+BEGIN_QUOTE
(el-get-bundle elpa:jedi-core)
(el-get-bundle company-jedi :depends (company-mode))
#+END_QUOTE

company-jedi 是 company 的一个 backend，使用 jedi 这个 Python 的自动补全和静态分析工具。需要注意的是，使用 package-install 安装 company-jedi 就好了，它会安装 jedi-core 这个 package，里面有对 jedi 的封装。说这个是因为用户如果没有看 company-jedi 的说明，有可能会去安装 jedi 这个 Emacs package，但实际上这个 package 是一个 auto-complete 的后端，完全不用。
** Emacs Lisp 功能扩展集锦
（https://docs.huihoo.com/homepage/shredderyin/emacs_elisp.html）
*** session.el
**** 用法
#+begin_src elisp
    (require 'session')
    (add-hook 'after-init-hook 'session-initialize)
#+end_src
**** 作用
使用了这个扩展之后，你上次离开 Emacs 时的全局变量 (kill-ring，命令记录……)，局部变量，寄存器，打开的文件，修 改过的文件和最后修改的位置，…… 全部都会被记录下来。
加载了 session 之后菜单上会多两项：最近访问过的文件和最近 修改过的文件。

*** desktop.el
**** 用法
#+begin_src elisp
  (load "desktop") 
  (desktop-load-default) 
  (desktop-read)
#+end_src
****  作用
如果你想保存上次打开的文件记录，那么可以使用 desktop。这是 Emacs 自 带的。你只需要加入以上设置，然后 M-x desktop-save。以后 Emacs 启动时就会打开你上次离开时的所有 buffer.

M-x desktop-clear 可以删除记住的内容，你闲现在记住的 buffer 太多就可以采用这个办法。不过我还是建议用 ibuffer(见下) 来管理这些buffer，因为有时你会发现，如果删掉全部记住的buffer， 以后你需要一定的时间来打开你经常编辑的文件！

如果session跟desktop配合，下次启动Emacs 的时候，就像根本 没有关闭
Emacs 一样！
*** ibuffer.el
**** 用法：
#+begin_src elisp
  (require 'ibuffer)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
**** 作用
使用了 desktop 之后有可能使你同时有几十个 buffer 同时打开 着。有时你想把其中一些关闭，有时你想在某些 buffer 里寻找某个 regexp。这个时候你可以用 ibuffer，它有跟 dired 相似的界面。 可以对 buffer 进行各种标记，排序，隐藏，查找，替换。非常好用。 看看这个[[eww:https://docs.huihoo.com/homepage/shredderyin/images/ibuffer.png][抓图]]就是我限定显示 emacs-lisp-mode 和 c-mode 的 buffer，按 major mode 名称排序， 并做上一些记号的情况。

我常用的一个功能是，用 %-n 标记符合某种名字的 buffer，然 后按 "O" 在这些buffer里寻找我需要的字串。比如在所有打开的后 缀为 html 的 buffer 里寻找 "Emacs" 字样，得到如下结果。
** w3m(浏览网页)（和eww类似）
*** 为什么要在emacs中浏览网页
可以找出好多理由：比如速度快，支持emacs的快捷键，编辑文档时不需要从浏览器拷贝再粘贴到emacs，以及咳咳～，隐蔽性强。
*** 什么是w3m
w3m 与Links,Lynx一样，都是基于文本的浏览器。w3m支持表格、框架、SSL连接、颜色。如果是在支持图形界面的终端下，还可以显示图片（inline image）。 w3m支持很多快捷键，可以参考[[https://wiki.ubuntu.org.cn/W3m][这里]] 。
*** 如何在emacs中浏览网页
使用w3m emacs可以作为其他程序的界面, 当然也就可以作为w3m的界面，从而实现在emacs中浏览网页。而这些就是通过Emacs-w3m 这个emacs的扩展来实现的。 Emacs-w3m是Emacs调用w3m的接口，所以首先还要安装w3m。另外，为了能够显示图片，还需要安装w3m-img。 此时就可以使用emacs浏览网页了。 首先加载Emacs-w3m模块：
#+begin_quote
  M-x load-library RET w3m
  M-x w3m
#+end_quote
打开一个w3m的buffer，输入url就可以浏览网页了。
** go-translate (翻译插件)
*** 简介
To be the most powerful translator on Emacs. Supports multiple translation engines such as Google, Bing, deepL.

First, Install it via MELPA or download from github. Make sure this is on your `load-path'.

Then, add following lines to your `.emacs':

  (require 'go-translate)
  (setq gts-translate-list '(("en" "zh")))
  (setq gts-default-translator
       (gts-translator
        :picker (gts-prompt-picker)
        :engines (list (gts-google-engine) (gts-google-rpc-engine))
        :render (gts-buffer-render)))

And start your translate with command `gts-do-transl
** image+
Emacs默认就可以查看图片, 但是在放大缩小方面需要写额外的配置工作需要安装image+模块,可以通过package的方式安装

然后在init.el中添加一行:
;;image+
(eval-after-load 'image '(require 'image+))

当打开png图片的时候,运行下面的命令M-x:
imagex-auto-adjust-mode

然后重新刷新buffer
revert-buffer

就能看到在窗口内看到大小合适的图片.
如果需要放大缩小, M-x
imagex-global-sticky-mode

然后用下面的快捷键进行缩放等操作
C-c + / C-c -   放大/缩小
C-c M-m  自动适应当前frame大小
C-c C-x C-

