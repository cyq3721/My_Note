#+title: Web前端开发
#+author: CYQ
#+date: <2022-01-24 Mon>
#+startup:indent
#+html_head: <link rel="stylesheet" type="text/css" href="./css/worg.css"/>
#+options:toc:t
#+options: ^:nil author:nil _:nil

* 第 1 篇 HTML5
** 第1章 HTML5 学习概述
HTML 是 HyperText Markup Language (超文本标记语言) 的缩写.
*** 本章概述
1. 了解 HTML 的发展历程及影响
2. 安装 HTML 的开发软件
3. 掌握 HTML 的基本结构和语法
*** 认识 HTML5
HTML5 是 HTML 最新的修订版本, 2014 年 10 月由万维网联盟(W3C) 完成标准制定. 是跨平台的.

**** HTML 的发展历程
    通俗来讲，HTML 就是网页的源代码，任何一个网页都是由一行行HTML 代码编写而成的。

HTML 的第一个版本诞生于20 世纪七八十年代，当时互联网没有普及，也没有专业的组织制定HTML 规范。因此，那个时代HTML 的发展非常混乱，并没有受到开发者的重视，更没有得到大幅度的发展，HTML 还是一门冷门的语言。

    HTML 真正崛起是从1998 年诞生的HTML4.0 版本开始的，紧接着在1999 年更新了HTML4.01 版本。自HTML4.01 版本以后，Web 世界经历了巨变。此时，被称为BAT 三巨头的百度、阿里巴巴、腾讯等互联网企业相继崛起，标志着互联网时代的到来。

    HTML5 是由W3C（万维网联盟）于2007 年正式立项的，直至2014 年10 月底，这个长达八年的规范终于制定完成并公开发布。

    HTML5 将会取代HTML4.01、XHTML1.0 标准，使网络标准满足互联网应用迅速发展的需求，为移动平台带来多媒体，推动Web 进入新的时代。
**** HTML5 与 HTML4 的区别
 1. 语法简单化
    更简单的doctype 是HTML5 中众多新特征之一。在HTML5 中，头部只需要写<!DOCTYPE html>即可。HTML5 的语法兼容HTML4 和XHTML1，但不兼容SGML。
 2. 新增语义化标签
    新增语义化标签新增加的语义化标签（如<header>、<footer>、<section>等）使得网页的可读性变得更高，也更加明确地表示出网页的结构，对于搜索引擎优化（SEO）有很大帮助。
 3. 新的媒体标签
    新的<audio>和<video>标签可以用来嵌入音频文件和视频文件。这些标签的使用让网页播放音频、视频更加方便。
 4. 使用画布标签绘制图形
    <canvas>标签具有绘图功能，通过与JavaScript 脚本的搭配，可在网页上绘制图像。
 5. 新的表单设计
    在 HTML5 中，表单增加了新元素，也为表单元素增加了许多新属性，让表单的使用更加便利。
 6. 废除了一些旧标签
    HTML5 废除了一些标签，其中大部分为网页美化标签，如<center>、<font>、<tt>、<big>、<dir>、<marquee>、<frame>等。
** 学习 HTML5 前的准备工作
*** 常用浏览器介绍
 1. Internet Explorer
 2. Google Chrome
 3. Mozilla Firefox
***  浏览器内核介绍
    浏览器内核主要分成两部分：渲染引擎和JavaScript 引擎。
    1) 渲染引擎负责获取网页内容（HTML、XML、图像等）、整理信息（如加入CSS等）以及计算网页的显示方式，然后输出至显示器或打印机。所有网页浏览器、电子邮件客户端及其他需要编辑、显示网络内容的应用程序都需要内核。浏览器内核的不同对于网页的语法解释也会有不同，所以渲染的效果也不同。
    2) JavaScript 引擎负责解析和执行JavaScript 来实现网页的动态效果。
开始，渲染引擎和JavaScript 引擎并没有区分得很明确，后来，JavaScript 引擎越来越独立，内核就倾向于指渲染引擎。

*常见的浏览器内核*
| 内核             | 浏览器                                      | 备注                                                       |
| Trident(IE 内核) | IE 浏览器、 360 浏览器、遨游浏览器、百度浏览器等 | 部分浏览器新版本是双核，一个内核是 Trident内核，再增加一个其它内核 |
| Gecko 内核       | firefox                                    | 代码完全开放                                                |
| Presto          | opera 早期版本内核                           | 现在已经废弃                                                |
| Webkit 内核      | Chrome、safari、Android 默认浏览器           |                                                           |

** HTML5 的语法与结构
 HTML5 主要用标签来组织。
*** HTML5的语法
 1. HTML5 标
    标签是HTML5 最基本单位和最重要的组成。使用“<”和“>”括起来，标签都是闭合的（规范）。标签分为单标记和双标记，单标记只有起始标记而没有结束标记，双标记是成对的开始标记和结束标记，基本语法如下：
    
    #+begin_src html
      <hr/> <!--单标记也叫自结束标记-->
      <title></title> <!--标准标记，前面是开始标记，后面是结束标记，标记可以嵌套，但不能交叉嵌套-->
    #+end_src

   *部分 HTML5 标签*
   | HTML5 标签 | 作用          | HTML5 标签 | 作用           |
   | html      | 定义 html 文档 | body      | 定义文档体 body |
   | head      | 定义文档头信息 | title     | 定义文档的标题  |
   | a         | html 链接标签  | img       | html 图像标签   |
   | div       | html 层       | table     | 定义 html 表格  |
   | tr        | 定义表格行     | td        | 定义表格列      |
   | form      | html 表单标签  | input     |  定义表单的输入域     |

 2. HTML5 标签属性
    标签属性是标签的一部分，用于包含额外的信息。一个标签中可以有多个属性，并且属性和属性值成对出现，基本语法如下：

    #+begin_src html
      <img src=“../image/a.png” width=“100” height=“100”/>
      <!-- 结构是 属性名=”属性值” -->
    #+end_src

 3. HTML5 文档注释
    注释是对文档的解释，浏览器不会对注释内容进行解析并呈现到页面上，只有查看HTML5 文件源代码时才会看到注释，基本语法如下：

    #+begin_quote
    <!-- 这是 HTML5 注释-->
    #+end_quote
*** HTML5的文档结构
    HTML5 文件均以<html>标记开始，以</html>标记结束。一个完整HTML5 文件包含头部和主体两个部分的内容，在头部标记<head></head>里可以定义标题、样式等，文档的主体<body></body>中的内容就是浏览器要显示的信息。
    HTML4.01 之前的文档声明，语法结构如下：
    
    #+begin_src html
      <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN""http://www.w3.org/TR/html4/strict.dtd">
    #+end_src

    HTML5已经对文档声明进行了简化，语法结构如下

    #+begin_quote
    <!DOCTYPE html>
    #+end_quote

    HTML5 文档的基本结构， 代码如下：
    #+begin_src html
            <!DOCTYPE html>
      <html>
        <head>
          <meta charset="utf-8" />
          <title>我的第一个网页</title>
        </head>
        <body>
          Hello World！
        </body>
      </html>
    #+end_src

    *注意：页面中必须有文档声明，而且必须在文档页面的第一行！*

 1. 头部内容
    <head>标签用于表示网页的元数据，即描述网页的基本信息。其中主要包含以下标签：
    1）<title>标签用于定义页面的标题，是成对标记，位于<head>标签之间。
    2）<meta>标签用于定义页面的相关信息，为非成对标记，位于<head>标签之间。
    3）<meta>标签可以描述页面的作者、摘要、关键词、版权、自动刷新等页面信息

    meta 标签的常用属性
    1) charset 属性：设置文档的字符集编码格式
        基本语法如下：
        #+begin_src html
          <mtea charset="UTF-8">
        #+end_src

        HTML4.01 之前的文档设置字符集编码，基本语法如下：
        #+begin_src html
          <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> 
        #+end_src

         常见的字符集编码格式包括GB2312、GBK、UTF-8 等。
         GB2312 是国标码，简体中文。GBK 是扩展的国标码。UTF-8 是一种针对Unicode 的可变长度字符编码，也称万国码（常用）。

    2) http-equiv 属性：将信息写给浏览器看，让浏览器按照这里面的要求执行，可选属性值有Content-Type（文档类型）、refresh（网页定时刷新）、set-cookie（设置浏览器cookie 缓存），需要配合content 属性使用。http-equiv 属性只是表明需要设置哪一部分，具体的设置内容需要放到content 属性中。

    3) name属性：将信息写给搜索引擎看。 使用方法同 http-equiv 属性
       常用的属性值有author（作者）、keywords（网页关键字）、description（网页描述），它们在网页中必不可少。
       基本语法如下：
       #+begin_src html
          <!--作者-->
          <meta name="author" content="http://www.jredu100.com" />
         <!--网页关键字：多个关键字用英文逗号分隔-->
          <meta name="keywords" content="HTML5,网页,Web 前端开发" />
          <!--网页描述：搜索网站时，title 下面的解释文字。-->
          <meta name="description" content="这是我在杰瑞教育开发的第一个网页。" />
       #+end_src

       使用<link>标签可以加载一个图片作为网页图标。<link>标签有如下属性：
       1）rel 属性：声明被链接文件与当前文件的关系，此处选icon。 可以理解为类型
       2）type 属性：声明被链接文件的类型，可以省略。
       3）href 属性：表示图片的路径地址。

       基本语法如下：
       #+begin_src html
         <link rel="icon" type="image/x-icon" href="img/icon.jpg" />
       #+end_src
2. 主体内容
   标记<body></body>包含文档所有的内容，如文字、图像、表格、表单等元素。例如，在<body>中使用语义化标记设计网页，基本语法如下：
   #+begin_src html
       <body>
         <header>网站主题</header>
         <nav>连接菜单</nav>
         <article>
           主内容
           <section>
             章节段落
           </section>
        </article>
        <aside>侧边栏</aside>
        <footer>页脚</footer>
     </body>
   #+end_src
** 章节案例： 开始我的第一个网页
#+begin_src html
  <!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8" />
      <meta name="keywords" content="杰瑞教育,HTML5,网页开发" />
      <meta name="description" content="这是我开发的第一个网页！" />
      <title>我的第一个网页</title>
      <link rel="icon" href="img/icon.jpg"/>
    </head>
    <body>
      欢迎来到 HTML5 的奇幻世界！
    </body>
  </html>
#+end_src

** 第 2 章 HTML5 常见的块级标签和行级标签
*** 本章目标
1. 掌握常见的块级标签
2. 掌握常见的行级标签
3. 掌握行级标签和块级标签的区别
4. 了解 HTML5 的新增标签
*** 常见的块级标签
    块级标签，顾名思义，此类标签在网页中显示为块。块级标签一般独占一行，新的块级标签将从新的一行开始排列，它可以容纳内联元素和其他块级元素。
**** 标题标签
    标题标签的作用是设置段落标题的大小，共设置了6 级，从1 级到6 级每级标题的字体大小依次递减。
    基本语法如下：
    #+begin_src html
       <h1>标题文字</h1>
    #+END_SRC
**** 水平线标签 hr
    水平线标签的作用是添加水平分隔线，让页面更容易区分段落。
    基本语法如下：
    #+begin_src html
      <hr />
    #+end_src
**** 段落标签 p
    使用段落标签可以区分段落，不同的段落间会自动增加换行符，段落上下方各会有一个空行的间隔。
    基本语法如下：
    #+begin_src html
      <p>段落文字</p>
    #+end_src
**** 换行标签br
    使用换行标签可以控制段落中文字的换行显示。一般的浏览器会根据窗口的宽度自动将文本进行换行显示。 基本语法如下：
    #+begin_src html
      <br />
    #+end_src
**** 引用标签 blockquote
    使用引用标签来表示引用的文字，同时会将标签内的文字缩进显示。其cite 属性表明引用的来源，一般表明引用网址。
    基本语法如下：
    #+begin_src html
      <blockquote cite=" http://www.jredu100.com">引用的文字</blockquote>
    #+end_src
    cite属性可以省略， 引用有缩进效果。
**** 预格式标签 pre
   预格式标签可以将文字按照原始的排列方式进行显示(保留原有的换行和缩进)
   基本语法如下：
   #+begin_src html
                    <pre>需要按原
                          格式显示的
                               文字
                    </pre>
   #+end_src
**** <ul><li></li></ul>：无序列表标签
无序列表是将文字段落向内缩进，并在每个列表项前面加上圆形（●）、空心圆形（○）或方形（■）等符号，以达到醒目的效果。由于无序列表没有顺序编号，而是采用项目符号的形式，所以又被称为符号列表。 基本语法如下：
#+begin_src html
   <ul type="disc">
     <li>第一项</li>
     <li>第二项</li>
     <li>第三项</li>
   </ul>
#+end_src
**** <ol><li></li></ol>：有序列表标签
基本语法如下：
#+begin_src html
  <ol type="1">
    <li>第一项</li>
    <li>第二项</li>
    <li>第三项</li>
  </ol>
#+end_src

** 第 3 章 HTML5 表格
*** 本章概述
 了解表格的基本结构。
 掌握表格的基本属性。
 掌握表格的行、列的基本属性。
 了解表格的结构化和直列化。
*** html5 表格简介
**** 表格的基本结构
表格的基本结构由行列组成，单元格是表格的最基本单位。
**** 表格的定义
表格由<table> 标签定义。每个表格均有若干行，行由<tr> 标签定义，每行被分割为若干单元格，列由<td> 标签定义。字母td 指表格数据（table data），即数据单元格的内容。如果表格的第一行为表头，那么<td>标签需要用<th>标签替换掉。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等。
#+begin_src html
    <!DOCTYPE html>

  <html>

    <head>

      <meta charset="utf-8" />

      <title>表格的基本结构</title>

    </head><body><table>

        <tr>

          <th>表头1</th>

          <th>表头2</th>

          <th>表头3</th>

        </tr>

        <tr>

          <td>第一行1</td>

          <td>第一行2</td>

          <td>第一行3</td>

        </tr>

        <tr>

          <td>第二行1</td>

          <td>第二行2</td>

          <td>第二行3</td>

        </tr>

      </table>

    </body>
    
  </html>
#+end_src
*** 表格的基本属性
表格的属性可以分为两大类，分别为作用于<table>标签和作用于行<tr>、列<td>的属性。
**** border：表格边框宽度
border 属性定义表格边框，属性值可以接收整数类型的数字，表示设置表格的宽度。基本语法如下：
#+begin_src html
  <table border="1"> </table>
#+end_src

#+begin_quote
注意：如果border 的值增大，则只有表格最外围框线增加，每个单元格上的边框并不会变化。表格的border=5 时的显示效果如图3-6 所示。
#+end_quote
**** width/heigth: 宽度/高度属性
基本语法如下：
#+begin_src html
  <table border="1" width="400" height="200"> </table>
#+end_src
**** bgcolor：背景色属性
基本语法如下：
#+begin_src html
  <table border="1" bgcolor="red"> </table>
#+end_src
**** background：表格背景图属性
background 属性定义表格的背景图，需要传入一张图片的路径地址。当background 背景图属性与bgcolor 背景色属性同时存在时，背景图会覆盖掉背景色。

基本语法如下：
#+begin_src html
  <table border="1" background="img/img.png"> </table>
#+end_src
**** bordercolor : 边框颜色属性
基本语法如下：
#+begin_export html
<table border="1" bordercolor="blue"> </table>
#+end_export
**** cellspacing：单元格间距属性
定义单元格和单元格之间的距离。 取值 0 时， 表示单元格之间没有间距。
#+begin_export html
<table border="1" cellspacing="10"> </table>
#+end_export

注意：cellspacing 取值为 0， 不能合并掉边框的宽度， 边框的宽度还是存在的。 
**** cellpadding：单元格内边距属性
单元格中的文字与单元格边框之间的距离。

基本语法如下：
#+begin_export html
<table border="1" cellpadding="10"> </table>
#+end_export
**** align: 表格对齐属性
用于调整表格在其父容器中的位置，可选值有left、center、right，分别表示表格居左、居中、居右。

基本语法如下：
#+begin_export html
<table border="1" align="center"> </table>
#+end_export

注意：表格的align 属性现在不再建议使用。它的相关功能已经被CSS 中的浮动(float)所取代
*** 行和列的属性（tr、td 的属性）
**** width/height：单元格宽度/高度属性
主要用于调整表格中单元格的宽和高。
#+begin_src html
  <table border="1">

    <tr>

      <td width="100" height="50">第一行1</td>

      <td>第一行2</td>

      <td>第一行3</td>

    </tr>
    
  </table>
#+end_src

*注意：*  当表格属性与行列属性冲突时，以行列属性为准。
**** bgcolor: 单元格背景色属性
语法如下：
#+begin_src html
  <table border="1">
    <tr>
      <td bgcolor="#0000FF">第一行 1</td> <td>第一行 2</td>
      <td>第一行 3</td>
  </tr> </table>
#+end_src
**** align: 单元格内容水平对齐属性
语法如下：
#+begin_export html
<table border="1" width="300" height="50">
<tr>
   <td align="left">第一行 1</td>
   <td align="center">第二行 2</td>
   <td align="right">第三行 3</td>
</tr>
</table>
#+end_export

*注意：*
#+begin_quote
表格的 align 属性是控制表格自身在浏览器中的显示位置，而行列的 align 属性是控制单 元格中文字在单元格中的对齐方式。

表格的 align 属性并不影响表格内文字的水平方式，<tr>标签的 align 属性可以控制一行 中所有单元格的水平对其方式。
#+end_quote
**** valign：单元格内容垂直对齐属性
语法如下:
#+begin_export html
<table border="1" width="200" height="100">
  <tr>
    <td valign="top">第一行 1</td>
    <td valign="center">第一行 2</td>
    <td valign="bottom">第一行 3</td>
  </tr>
</table>
#+end_export

*注意:* 当表格属性与行列属性冲突时，以行列属性为准(近者优先)。
**** colspan/rowspan: 表格的扩行于跨列
colspan 属性表示跨列，当某个格跨 N 列时，其右边 N-1 个单元格需删除。
rowspan 属性表示跨行，当某个格跨 N 行时，其下方 N-1 个单元格需删除。

语法如下：
#+begin_export html
<table border="1">
<tr>
   <td colspan="3">学生成绩</td>
</tr>
<tr>
   <td rowspan="2">张三</td>
   <td>语文</td>
   <td>98</td>
</tr>
<tr>
   <td>数学</td>
   <td>95</td>
</tr>
<tr>
   <td rowspan="2">李四</td>
   <td>语文</td>
   <td>88</td>
</tr>
<tr>
   <td>数学</td>
   <td>91</td>
</tr>
</table>
#+end_export
*** 表格的结构化与直列化
为了更好地管理及格式化表格，更好地语义化标签，需要掌握表格的结构化与直列化。
**** 表格的结构化
表格的结构化就是将表格分为表头、表体、表尾三部分，这样在修改其中一部分时不会 影响到其他部分，方便对表格进行操作。

一个完整的表格通常包括以下四部分:
1) caption:表格的标题，通常出现在表格的顶部。
2) thead:定义表格表头，通常表现为标题行。
3) tbody:定义一段表格主体，一个表格可以有多个主体，可以按照行来进行分组。
4) tfoot:定义表格的脚尾，通常表现为总计行。
** 第四章 HTML5 表单
*** 本章目标
- 熟悉表单的结构。
- 掌握表单的 input 元素及其他元素。
- 掌握表单 input 元素的 type 属性。
- 了解 HTML5 智能表单的新增元素及属性。
*** 表单的结构
表单由许多表单控件组成，主要包括用户填写信息部分和表单提交按钮。

基本语法如下：
#+begin_export html
<form>
  各种表单控件
</form>
#+end_export
*** 表单的常用属性
表单的常用属性有 3 种
1. action 属性
   action 属性用于指定表单提交时向何处发送表单数据，即需要发送的服务器地址。基本。
   
语法如下:
#+begin_export html
<form action="form.php">
   各种表单控件
</form>
#+end_export

1. method 属性
   method 属性用于指定表单向服务器提交数据的方法，包括两种方法，分别是 get 和post。这两种方法各有特点，下面分别进行具体介绍。
   (1) get方法
   使用 URL(统一资源定位符)传递参数:http://服务器地址?name1=value1&name2=
   value2，其中“?”符号表示要进行参数传递，“?”符号后面采用“name=value”的形式传 递，多个参数之间，用“&”符号连接。URL 传递的数据量有限，只能传递少量数据。

   注意:使用 URL 传递参数并不安全，所有信息可在地址栏中看到，并且可以通过地址 栏随意传递其他数据。

2. post 方法
   将数据封装后使用 http 请求传递，信息在地址栏中不可见，比较安全，并且传递的数据量理论上没有限制。
   
   综上所述，虽然 get 方法是表单提交的默认方法，但是通常采用 post 方法传递数据。

   基本语法：
   #+begin_export html
<form action="form.php" method="post">
  各种表单控件
</form>
   #+end_export

3. enctype 属性
   enctype 属性指定表单发送的编码方式，只有 method="post"时才有效，共有三种属性值。
   （1）  application/x-www-form-urlencoded:此为默认值，如果 enctype 属       性省略不写，则表示采取此种编码方式。
   （2)  multipart/form-data:不对字符编码，用于上传文件时使用。
   （3)  text/plain:将空格转换为“+”符号，但不编码特殊字符，通常在将表单发送到      电子 邮箱时使用。

*** input 输入框
作为表单最重要的元素，input 输入框用于搜集用户信息。根据不同的 type 属性值，可 以用多种形式输入内容。例如，当 type 值为 password 时就可以设置输入框为输入密码形 式，此时用户输入的内容用小黑点代替显示。灵活使用 input 输入框可以让表单收集更多的 信息，下面来具体学习 input 输入框的相关属性和类型。
**** input 常用属性
1. type 属性
   type 属性表示 input 输入框的类型，它的默认值是 text。所有浏览器都支持 type 属性， 但是 type 的属性值并不是所有浏览器都可以支持，本节介绍的属性值所有浏览器均可支持， 但后续小节提到的某些 HTML5 表单新增属性值则需要注意浏览器的兼容性。
2. name 属性
   name 属性表示 input 输入框的名称，一般必填。因为传递数据时，使用“name=value” 的形式传递。
3. value 属性
   value 属性表示 input 输入框的默认值。

   代码示例：
   #+begin_export html
<form action="form.php" method="post">
   请输入内容:
   <input name="text1" type="text" value="输入框的默认值"/>
</form>
   #+end_export
   
4. placeholder 属性
 placeholder 属性表示输入框中的提示信息，当输入框有 value 属性的时候，提示内容会 消失，转而显示 value 属性值。

* 第 2 篇 CSS3
** 第 5 章 CSS 基础知识
*** 本章学习目标
- 了解CSS的基本概念及语法结构
- 了解页面中使用CSS的三种方式
- 熟练掌握各种CSS选择器的使用
- 了解CSS选择器命名规范及优先级
*** CSS概述
**** CSS简介
CSS 于 1996 年由 W3C 组织制定，最新的版本为 CSS3，主要用于美化网页。CSS 是对页面内容数据和显示风格分离思想的一种体现，通过建立定义样式的 CSS 文件，让 HTML 文件调用 CSS 文件所定义的样式，如果需要修改 HTML 中的部分显示风格，只要修改对应 的 CSS 文件即可，极大地提高了工作效率。
**** CSS语法结构
CSS 由两部分组成:选择器及一条或多条声明。选择器用于选中用户需要改变样式的 HTML 元素，选择器的声明部分由大括号包裹，每条声明由一个属性和一个属性值组成。属 性是需要对元素进行设置的样式属性，属性和属性值用冒号分开，多个属性之间用分号分隔。
基本语法如下:
#+begin_src css
  选择器{ 属性:属性值;
          [属性:属性值; ...]
   }

  h1{
      color:red;
  }
#+end_src

代码解释如下:

1) h1:选择器，表示要选择所有的 h1 标签。
2) color:属性名，表示要对字体颜色属性进行设置。
3) red:属性值，表示要设置字体颜色为红色。
4) 属性与属性值组成了一个声明，属性与属性值之间用冒号分隔。

使用 CSS 时，注意事项如下:

1) CSS 是大小写不敏感的，但规范的写法是全部小写。
2) 规范性要求，每一行只写一个声明。
3) 规范性要求，每个声明后边需要添加分号作为结束符。
4) 所有符号均为英文，切勿使用中文符号。
5) 注意代码的缩进，用 HBuider 编写代码会有提示，避免拼写错误。

**** CSS注释
为样式表添加注释有助于标记样式的作用范围以及复杂样式的作用等，便于进行后期的 维护。CSS 添加注释的方式为/*......*/。注释代码示例如下:
#+begin_src css
      /*设置 h1 标签的样式*/
    h1{
        /*设置字体颜色为红色*/
        color:red;
    }
#+END_SRC

**** 行内样式表
行内样式表，顾名思义，就是将 CSS 代码放置在 HTML 代码内部，作为 HTML 标签的 属性存在，HTML 代码与 CSS 代码处于同一行中。

代码示例如下：
#+begin_src css
     <a href="#" style="color:red;font-size:10px;">日用百货</a>
     <!--产生一个红色的，字号是 10px 的超链接-->
#+end_src

行内样式表的特点如下:
1) 将 CSS 代码与 HTML 代码糅合在一起，不符合 W3C 关于“内容与表现分离”的基 本规范，不利于后期维护。
2 )可以单独定义某个元素的样式，灵活方便。
3) 优先级最高，但是不推荐使用，仅在测试时可以采用。


**** 内部样式表
内部样式表也称为内嵌样式表，是指 CSS 代码内嵌到 HTML 代码中，二者处于同一个 文件中，通常 CSS 代码放置在 HTML 代码的<head>标签内部。

代码示例如下:
#+begin_src html
   <head>
  <!--charset="UTF-8"表示当前文档采用字符集中 utf-8,支持中文-->
  <meta charset="UTF-8">
  <title>内部样式表</title>
  <!--内部样式表 代码要放置在 style 标签内-->
  <style type="text/css">
    div{ color:red;
    }
  </style>
  </head>
#+end_src

内部样式表的特点如下:
1) 写在<head>标签中，一定程度地将 CSS 代码与 HTML 代码进行了分离，但是分离不 够彻底，无法应用于其他 HTML 文件，实现样式复用。
2) 优先级低于行内样式表。

**** 外部样式表
外部样式表是指 CSS 代码完全独立出来，单独放置在扩展名为.css 的文件中，在 HTML 文件中，将 CSS 文件引入进来，形成关联。

代码示例如下:
#+begin_src html
   <head>
     <meta charset="UTF-8">
     <title>外部样式表</title>
     <link rel="stylesheet" type="text/css" href="css/ch05.css" />
  </head>
#+end_src

其中，<link>标签具有以下属性:
1) rel 属性:声明被链接文档与当前文档的关系，必写。
2) type 属性:被链接文档的类型，可写。
3) href 属性:被链接文档的地址，必写。
   
外部样式表的特点如下:
1) 与内部样式表一样，写在<head>标签中，实现了 CSS 代码与 HTML 代码的彻底分
离，方便样式复用与后期维护，符合 W3C 规范。
2) 优先级要低于内部样式表。
3)后续开发中推荐使用此种方式。

