#+title: emacs完全补全计划
#+date:<2025-05-12 Mon>
#+author:chen
#+html_head: <link rel="stylesheet" type="text/css" href="./css/worg.css"/>

本文链接：https://longlycode.github.io/post/emacs完全补完计划二简单配置和设置/

*  简单配置和设置
** 我们在谈论lisp的时候谈论什么？

#+begin_quote
很多emacs教程都想避开Emacs Lisp(下面简称elisp)，完全不可能，反而学习过程中会磕磕碰碰。其实lisp作为一个古老的语言，语法上确实相比现代语言看起来看起来怪异很多，但并不落后，反而有独到之处，简洁易懂。在函数式编程复兴的浪潮中，去了解函数编程的始祖显得意义非凡。之后的内容在配置过程中不断回顾elisp的语法和用法，先提三点：
#+end_quote

***  操作符前置
程序的本质是什么，无非是数据本身和操作数据过程。lisp把操作数据的“操作符”前置了，比如平常计算多个数加法的时候用 1+2+3+4+5，lisp这样做： (+ 1 2 3 4 5)，括号是lisp的特性，左括号的往右的第一个字符就是所谓的“操作符”，用空格来区别不同的参数。这样做有什么好处？现代语言因为更偏向自然语言，操作符的位置更加灵活，比如调用一个方法的时候：object.method(args)，方法需要一个对象支撑，自己变成了附庸品，后置了；几乎所有连接字符串都可以这么操作：“HE”+“LLO”+“WORLD”，操作符+位于中间；还有最后一种情况，常见的 Assert statement 或者内置函数调用 ABS(num)又把操作符前置了，在操作符使用过程中混乱不协调，容易迷惑然后出错，所以灵活也有它的弊端。括号和操作符前置两个特性让lisp独特而优雅，组成了为人称道的S-expression(S表达式)，以后还会提及它的好处。


*** 数据结构
上面提到了返回，在其他大部分的语言里需要一个关键字return来实现，而lisp只要遇到括号就代表自动返回值，可以执行括号内容后返回，也可以根据括号前面的’单引号只返回括号本身。这时候就有人想在返回的时候部分内容能够执行就好了，比如(5 (* 2 5) 15 20)，如果返回的时候里面的表达式(* 2 5)能直接执行的话整个表达式就能返回(5 10 15 20)这样的数列。于是就有人想出了用外层的括号来控制内层的括号，变成`(5 ,(* 2 5) 15 20)，外层加个反引号内层加个逗号就能返回以5为倍数的数列了。

*** 配置文件位置
在linux 下，sudo touch ~/emacs.d/init.el，其中init.el文件是emacs 配置文件，用elisp写的文件都以el为拓展名。 在window下新建一个文件夹C:\Users\username\AppData\Roaming.emacs.d，其中username为本机的名字，在这个文件夹下新建一个init.txt，把它改为init.el即可。

*** 常见的配置方法
在这节只会提及一些elisp常见的关键字，这些关键字经常会困扰着新手，首先要知道elisp用来连接声明不同功用的变量名和函数名的。

**** nil 和 t
nil和t在elisp里面分别代表着false和true，用单个字母t来代表true让人措手不及。和其他语言一样，正整数也表示true，负整数表示false。

**** require
顾名思义它的作用就是引用包，后面一般加着包名，至于具体的设置和用法会在下一篇文章详细分析，只要知道它和其他语言中的import，require一样把其他模块或者包的上下文空间引入当前文件下。

**** setq
setq作用是赋值，一般这么用(setq variable value)，比如(setq kill-ring-max 200)让emacs剪切板存放的条目数上限为200。

**** add-to-list
添加一个元素到某个list里面，这样用(add-to-list LIST ELEMENT)。也可以看出除了用单个变量来控制某种配置外，emacs里面还存在各种list这种容器式数据结构，用来映射或者存放一组变量。

**** add-hook
添加钩子，比如(add-hook ‘window-setup-hook ‘toggle-frame-maximized)，作用是当window启动的时候frame最大化。在添加钩子的时候要查看是否有以-hook结尾的函数。

**** global-set-key、define-key 以及 kdb
1. kbd是一个宏，至于什么是宏，我们先暂按不说，它的存在就是为简化定义一系列按键输入（键序列），比如(kbd “C-x C-f”)会返回control+c 然后control+f的输入操作。

2. global-set-key用来定义按键绑定的函数，之前提到过emacs里面的任何操作都是由一个或者多个函数组成，结合上面的kbd宏，emacs这样定义的一个按键的功能——(global-set-key (kbd “C-x C-f”) 'find-file)。那么define-key又是什么？

3. global-set-key显而易见是用来定义全局的，针对于整个emacs而言的，污染性太大，define-key则用来定义针对某个mode才有的按键，也就是说当我们进入到某个mode的时候这个按键才生效。常见用法(define-key keymap function)，keymap保管了key和function的映射表，一般每个mode都会提供了一个keymap用于用户自定义。 如果不知道自己输入的键序列在kbd里面是怎么写的，可以使用C-h k来查看有没有此键序列的绑定，如果没有绑定任何的函数会返回这个键序列本身，就是写入kbd里面的内容。

*** 一份通用配置说明
#+begin_quote
这份配置几乎可以说是最基本的配置，没有安装其他的package，仅仅是内置和外观方面的设置。
#+end_quote

#+begin_src elisp
  ;;禁止菜单栏
(menu-bar-mode -1)
;;禁止显示工具栏
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
;;禁止显示滚动条
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;禁止emacs一个劲的叫
(setq visible-bell t);
;;在console，不想看到屏幕不停的闪
(setq ring-bell-function (lambda () t))
;;关闭启动是的那个“开机画面”
(setq inhibit-startup-message t)
;;设置剪切板最大条目数为200
(setq kill-ring-max 200)
;;一行显示最多显示80列
(setq default-fill-column 80)
;;缺省的major-mode为text-mode
(setq default-major-mode 'text-mode)
;;括号匹配时显示另外一边的括号
(show-paren-mode t)
(setq show-paren-style 'parentheses)
;;显示语法高亮
(global-font-lock-mode t)
;;设置编码
(set-buffer-file-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-16-le)
(set-default-coding-systems 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)  
(set-file-name-coding-system 'gb18030)
;;内部有个自动补全功能，根据当前buffer的内容、文件名、剪切板等自动补全
(setq hippie-expand-try-functions-list
      '(
        try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
;;按ALT+/ 键进行补全
(global-set-key (kbd "M-/") 'hippie-expand)
;;用ibuffer替换默认的buffer管理器
(global-set-key (kbd "C-x C-b") 'ibuffer)
;;用正则搜索替换默认搜索
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
;;一个好用的minibuffer插件ido，许多插件都基于它。
(ido-mode t)
(setq ido-enable-flex-matching t)
#+end_src

可以看出除了数字、nil和t之外所有的值都需要加’来传值，如果不加表示执行这个值，加了表示只需要返回它本身的字符。


*** 内置的自定义方法
显然虽然可以通过package说明来定义配置，但每个package包含了大量的自定义变量或者函数，使用M-x customize则会出现一个buffer列出了可自定义的类别，进入每个类别当中，又有各个package的名字，再随便选择一个package的名字就会展开这个package可定义的变量或者函数，每个条目都包含了此条目的说明以及现有默认的值。

比如M-x customize，进入 Faces这个用来配置emacs外观的配置组，再深入到Basic Faces，就可以看到一系列的变量和函数，接着选择 Cursor face(用来配置光标外观的)，在最左边按下enter键，就会展开一个Choose按钮，点击则会列出各种颜色，随便选一个，选完点最上面用apply或apply and save两个按钮，光标的颜色就变成了刚刚选取的颜色。 其实打开init.el文件也可以看到文件末尾增加了两个函数，也就是说在emacs内置的自定义操作最后还是以文字的形式保存到了init.el里。增加的函数如下：
#+begin_src elisp
  (custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(cursor ((t (:background "DarkOliveGreen1")) (t nil))))
#+end_src


* package的引入和管理

** package说明
emacs中package（包）和其他编辑器一样，把一些功能或者特性包装成为一个package。

**  package 存放在哪里
有package那么肯定需要知道存放在哪里，现在公认有两个稳定的仓库分别是ELPA和MELPA，当然也可以去emacswiki或者github上直接下载。下面的程序在emacs24以上的版本下有用，将它加入到init.el文件里面去：
#+begin_src elisp
  ;;内置的package管理，emacs24以上的版本有用
(require 'package)
;;将melpa仓库地址加入到package-archives这个列表变量里面
(add-to-list 'package-archives
    '("melpa" . "http://melpa.org/packages/") t)
;;这个是国内一个elpa仓库镜像，速度更快一些，你懂得
(add-to-list 'package-archives 
    '("popkit" . "http://elpa.popkit.org/packages/") t)
;;初始化package
(package-initialize)
;;更新仓库里面的package
(when (not package-archive-contents)
  (package-refresh-contents))
#+end_src

** 如何下载和安装
在emacs里面运行M-x package-list-packages，就进入package的下载界面。按 n 表示next，按i表示标记需要安装的包，按u表示取消标记，按x表示执行刚刚已经标记的包。 比如想安装emacs里面的VIM模拟器evil，可以先用C-s向下搜索evil，找到后按i再按x就下载到本地了。然后打开emacs的配置文件init.el，在里面添加下面：

#+begin_src elisp
  (require 'evil)
  (evil-mode t)
#+end_src

重启emacs就算安装完成了。每个包都会说明如何在init.el里面添加配置，各有不同，可以到网上查找它的说明，不过一般都是(xxx-mode)或者(xxx-mode t)。 可以看到init.el路径下面多出了一个elpa文件夹，里面存放着我们刚刚下载过的package。

** package 加载机制的前世今生
在前面两节完全可以安装和配置package了，但是会遗留许多问题，第一就是不够灵活，如果这个package不在已有仓库上面或者我们自己编写了一个*.el文件如何加到emacs配置里面？如果有很多个*.el文件分布到各个文件夹里面如何管理？如果有几个包是相互引用的，如何确定它们的加载次序？每次启动emacs的时候都全部加载会严重拖慢启动速度，怎么解决？怎么将一个自己写的某个函数挂载在某个package上面？要解决这些，我们需要了解emacs中引入package的内部机理。spacemacs有一篇写的很不错的emacs加载机制的文章，下面的内容相当于翻译加上自己的一些理解。

*** load-file
最简单粗暴的加载方式：
#+begin_src elisp
  (load-file "~/elisp/foo.el")
#+end_src
这是最为原始的方式，填写的路径必须是绝对路径，这个路径也不会加入到emacs中load-path里（后面会提到）。它也不会优先寻找编译过.elc文件（显然编译过文件的会更快些）。这种方式已经被抛弃，仅作为历史提一下。

*** Features
Features(特性)是emacs默认的另外一种常见的加载方式。相当于在xxx.el文件里面先注册，后在init.el里面引入，需要双方互相约定的协议。比如我编写了一个名为my-feature.el的文件，提供某些功能想加入到emacs里面，先在这个文件最底下写：
#+begin_src elisp
   ;; Your code goes here ...
  (provide 'my-feature)
#+end_src

其中provide（提供）就是所谓注册，后面跟的参数一定要和当前文件名一样。 然后再init.el文件里面加上：
#+begin_src elisp
;; Your code goes here ...
(require 'my-feature)
#+end_src

那么在启动emacs之后会从一个叫features的列表里检查my-feature这个feature有没有存在，没有会查找叫做my-feature.el或者my-feature.elc文件，加载它，如果没有找到会提示错误。实际上这个机制可以让各个package根据require 出现在init.el文件里的顺序来加载的，一定程度上解决了package之间的相互依赖的关系。 在这里还有个问题，features机制提到会自动查找.el和.elc文件，那么它会在哪里查找，总不能搜寻硬盘里面的所有位置吧。所以需要一个列表来管理这些位置，名叫load-path，跟电脑里面的环境变量相似。
#+begin_quote
(push "/some/path" load-path)
#+end_quote
相当把某个路径添加到load-path里面了。可以用来管理分布在多个不同路径下的.el和.elc文件。之前从elpa或者melpa下载安装package其实已经自动把下载的package路径加入到了load-path里面，所以可以直接使用require来配置包。

*** auto-loading
使用require机制可能比粗暴load-file高明那么一丢丢，它解决了package加载顺序的问题，还有管理不同地方的elisp文件。但是它的加载方式也是比较暴力，每次emacs启动会全部一次性加载能查找到的所有文件，这将导致emacs的启动速度大大减慢。 auto-loading就是为了解决这种情况而诞生。你可以向emacs中注册一个函数，只有当调用或者使用这个函数的时候，包含这个函数的文件才会加载。这么用
：
#+begin_src elisp
  (autoload 'some-function "some-file")
#+end_src

当调用some-function 时，加载some-file.el，再执行这个函数。autoload完整参数：(autoload FUNCTION FILE &optional DOCSTRING INTERACTIVE TYPE)，可以看出它除了提供加载文件地址外，还可以编写说明文档，在不加载文件时也能够查看它的用法。 autoload这种方法可以写入的到emacs配置文件里面，但明显不好管理，为什么不在函数定义处就指明它是一个autoload形式的函数呢？事实上可以用所谓的”魔术”注释来装饰一个函数的开头，让它autoload。

#+begin_src elisp
  ;;;###autoload
(defun my-function ()
  ;; Source code...
)
#+end_src

;;;###autoload是一种神奇的注释。当然autoload这种机制不局限于函数，可以用在一切可以定义的东西上面，比如宏、主模式、次模式等等。

*** eval after load
当我们加载一个package的时候想配置它，比如绑定一个自定义的函数等等。为了能够让我们的自定义的代码也autoload，使用with-eval-after-load。
#+begin_src elisp
  (with-eval-after-load 'helm
     ;; Some-Code
     )
#+end_src

当helm这个package加载后，some-code将接着执行，不管是使用features机制还是autoload机制。在emacs24.3方能使用with-eval-after-load，之前版本使用eval-after-load。


*** use-package
